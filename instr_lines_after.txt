	.file	"harness.c"
	.text
.Ltext0:
	.globl	__asan_stack_malloc_2
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align 8
.LC0:
	.string	"3 32 4 1 a 96 8 4 line 160 8 3 len "
	.section	.rodata
	.align 32
.LC1:
	.string	"-s"
	.zero	61
	.align 32
.LC2:
	.string	"input: "
	.zero	56
	.align 32
.LC3:
	.string	"buff"
	.zero	59
	.align 32
.LC4:
	.string	"stack"
	.zero	58
	.align 32
.LC5:
	.string	"heap"
	.zero	59
	.align 32
.LC6:
	.string	"global"
	.zero	57
	.align 32
.LC7:
	.string	"commands: -s <buff|stack|heap|global>"
	.zero	58
	.align 32
.LC8:
	.string	"-i"
	.zero	61
	.align 32
.LC9:
	.string	"%d"
	.zero	61
	.align 32
.LC10:
	.string	"int_over"
	.zero	55
	.align 32
.LC11:
	.string	"value = %d\n"
	.zero	52
	.align 32
.LC12:
	.string	"int_under"
	.zero	54
	.align 32
.LC13:
	.string	"div_by_zero"
	.zero	52
	.align 32
.LC14:
	.string	"use_after_free"
	.zero	49
	.align 32
.LC15:
	.string	"out_of_bounds"
	.zero	50
	.align 32
.LC16:
	.string	"commands: -i <int_over|int_under|div_by_zero|use_after_free|out_of_bounds>"
	.zero	53
	.align 32
.LC17:
	.string	"commands: < -i .. | -s ..>"
	.zero	37
	.align 32
.LC18:
	.string	"mleak"
	.zero	58
	.align 32
.LC19:
	.string	"memory leak start"
	.zero	46
	.align 32
.LC20:
	.string	"gonna call double_free"
	.zero	41
	.align 32
.LC21:
	.string	"did not crash"
	.zero	50
	.section	.text.unlikely,"ax",@progbits
.LCOLDB22:
	.section	.text.startup,"ax",@progbits
.LHOTB22:
	.p2align 4,,15
	.section	.text.unlikely
.Ltext_cold0:
	.section	.text.startup
	.globl	main
	.type	main, @function
main:
.LASANPC71:
.LFB71:
	.file 1 "./harness.c"
	.loc 1 9 0
	.cfi_startproc
.LVL0:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsi, %r8
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	leaq	-272(%rbp), %r15
	pushq	%rbx
	movl	%edi, %r13d
	movq	%r15, %r12
	subq	$264, %rsp
	.cfi_offset 3, -56
	movl	__asan_option_detect_stack_use_after_return(%rip), %eax
	testl	%eax, %eax
	jne	.L107

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.LVL1:
.L1:
	.loc 1 9 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%r15, %rbx
	movq	$1102416563, (%r15)
	movq	$.LC0, 8(%r15)
	shrq	$3, %rbx
	movq	$.LASANPC71, 16(%r15)
	leaq	224(%r15), %r14
	movl	$-235802127, 2147450880(%rbx)
	movl	$-185273340, 2147450884(%rbx)
	movl	$-218959118, 2147450888(%rbx)
	movl	$-185273344, 2147450892(%rbx)
	movl	$-218959118, 2147450896(%rbx)
	movl	$-185273344, 2147450900(%rbx)
	movl	$-202116109, 2147450904(%rbx)
	movq	%fs:40, %rax
	movq	%rax, -56(%rbp)
	xorl	%eax, %eax
	.loc 1 11 0
	cmpl	$3, %r13d
	je	.L108

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	.loc 1 72 0
	cmpl	$2, %r13d
	je	.L109

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.LBB51:
	.loc 1 100 0
	leaq	32(%r15), %rsi
	movl	$.LC9, %edi
	xorl	%eax, %eax
	call	__isoc99_scanf
.LVL2:
.LBB52:
.LBB53:
	.file 2 "/usr/include/x86_64-linux-gnu/bits/stdio2.h"
	.loc 2 104 0
	movl	$.LC20, %edi
	call	puts
.LVL3:
.L105:
.LBE53:
.LBE52:
	.loc 1 103 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	-192(%r14), %edi
	call	integer_overflow
.LVL4:
.LBB54:
.LBB55:
	.loc 2 104 0
	movl	$.LC11, %esi
	movl	%eax, %edx
	movl	$1, %edi
	xorl	%eax, %eax
	call	__printf_chk
.LVL5:
.L33:
.LBE55:
.LBE54:
.LBE51:
.LBB56:
.LBB57:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC21, %edi
	call	puts
.LVL6:
.LBE57:
.LBE56:
	.loc 1 9 0
	cmpq	%r15, %r12
	jne	.L110

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	$0, 2147450880(%rbx)
	movq	$0, 2147450888(%rbx)
	movq	$0, 2147450896(%rbx)
	movl	$0, 2147450904(%rbx)
.L3:
	.loc 1 129 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	xorl	%eax, %eax
	movq	-56(%rbp), %rcx
	xorq	%fs:40, %rcx
	jne	.L111

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret
.LVL7:
.L109:
	.cfi_restore_state
.LBB58:
	.loc 1 73 0 discriminator 2

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%r8, %rsi
	addq	$8, %rsi
	je	.L55

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	testb	$7, %sil
	jne	.L55

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%rsi, %rdx
	shrq	$3, %rdx
	cmpb	$0, 2147450880(%rdx)
	jne	.L112

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	8(%r8), %rdi
	testq	%rdi, %rdi
	je	.L113

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC18, %esi
	call	strcmp
.LVL8:
.LBE58:
	testl	%eax, %eax
	jne	.L33

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.LVL9:
.LBB59:
.LBB60:
.LBB61:
	.loc 2 104 0
	movl	$.LC19, %edi
	call	puts
.LVL10:
	jmp	.L33
.LVL11:
.L108:
.LBE61:
.LBE60:
.LBE59:
.LBB62:
.LBB63:
	.loc 1 12 0 discriminator 1

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	testq	%r8, %r8
	je	.L6

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	testb	$7, %r8b
	jne	.L6

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	leaq	8(%r8), %rdi
	movq	%rdi, %rcx
	shrq	$3, %rcx
	cmpb	$0, 2147450880(%rcx)
	jne	.L114

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	8(%r8), %r9
.LVL12:
	testq	%r9, %r9
	je	.L115

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%r9, %rsi
	movq	%r9, %r10
	shrq	$3, %rsi
	andl	$7, %r10d
	movzbl	2147450880(%rsi), %edi
	cmpb	%r10b, %dil
	jg	.L10

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	testb	%dil, %dil
	jne	.L116

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.L10:
.LVL13:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	cmpb	$45, (%r9)
	je	.L117

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.LVL14:
.L43:
.LBE63:
.LBE62:
.LBB70:
.LBB71:
	.loc 2 104 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC17, %edi
	call	puts
.LVL15:
	jmp	.L33
.LVL16:
.L117:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$1, %r11d
	subq	$.LC1, %r11
	leaq	.LC1+1(%r11), %r13
.LVL17:
.LBE71:
.LBE70:
.LBB72:
.LBB64:
	.loc 1 12 0 discriminator 3
	cmpq	$3, %r13
	ja	.L118

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.L12:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%r9, %rdi
	addq	$1, %rdi
	je	.L119

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%rdi, %rax
	movq	%rdi, %rcx
	shrq	$3, %rax
	andl	$7, %ecx
	movzbl	2147450880(%rax), %edx
	cmpb	%cl, %dl
	jg	.L15

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	testb	%dl, %dl
	jne	.L120

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.L15:
.LVL18:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	cmpb	$115, 1(%r9)
	je	.L121

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.LVL19:
.L59:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$1, %eax
	subq	$.LC8, %rax
	leaq	.LC8+1(%rax), %rdx
.LBE64:
.LBE72:
.LBB73:
.LBB74:
	.loc 1 43 0 discriminator 3
	cmpq	$3, %rdx
	ja	.L122

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.L34:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	testq	%rdi, %rdi
	je	.L123

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%rdi, %rcx
	movq	%rdi, %rsi
	shrq	$3, %rcx
	andl	$7, %esi
	movzbl	2147450880(%rcx), %r11d
	cmpb	%sil, %r11b
	jg	.L37

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	testb	%r11b, %r11b
	jne	.L124

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.L37:
.LVL20:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	cmpb	$105, 1(%r9)
	jne	.L43

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	addq	$.LC8+2, %rax
	.loc 1 43 0 is_stmt 0 discriminator 5
	cmpq	$3, %rax
	ja	.L125

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.L39:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%r9, %rdi
	addq	$2, %rdi
	je	.L126

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%rdi, %r13
	movq	%rdi, %rax
	shrq	$3, %r13
	andl	$7, %eax
	movzbl	2147450880(%r13), %r10d
	cmpb	%al, %r10b
	jg	.L42

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	testb	%r10b, %r10b
	jne	.L127

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.L42:
.LBE74:
.LBE73:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	cmpb	$0, 2(%r9)
	movq	%r8, -280(%rbp)
.LVL21:
	jne	.L43

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.LBB77:
	.loc 1 45 0 is_stmt 1
	leaq	-192(%r14), %rsi
	xorl	%eax, %eax
	movl	$.LC9, %edi
	call	__isoc99_scanf
.LVL22:
.LBB78:
	.loc 1 47 0
	movq	-280(%rbp), %r8
	movq	%r8, %rsi
	addq	$16, %rsi
	je	.L44

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	testb	$7, %sil
	jne	.L44

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%rsi, %r9
	shrq	$3, %r9
	cmpb	$0, 2147450880(%r9)
	jne	.L128

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	16(%r8), %r13
	testq	%r13, %r13
	je	.L129

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	.loc 1 47 0 is_stmt 0 discriminator 2
	movl	$.LC10, %esi
	movq	%r13, %rdi
	call	strcmp
.LVL23:
.LBE78:
	testl	%eax, %eax
	je	.L105

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.LVL24:
.LBB79:
	.loc 1 50 0 is_stmt 1 discriminator 2
	movl	$.LC12, %esi
	movq	%r13, %rdi
	call	strcmp
.LVL25:
.LBE79:
	testl	%eax, %eax
	jne	.L50

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	.loc 1 51 0
	movl	-192(%r14), %edi
	call	integer_underflow
.LVL26:
	jmp	.L33
.LVL27:
.L121:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	addq	$.LC1+2, %r11
.LBE77:
.LBB87:
.LBB65:
	.loc 1 12 0 discriminator 5
	cmpq	$3, %r11
	ja	.L130

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.L16:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%r9, %r11
	addq	$2, %r11
	je	.L131

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%r11, %rsi
	movq	%r11, %r10
	shrq	$3, %rsi
	andl	$7, %r10d
	movzbl	2147450880(%rsi), %r13d
	cmpb	%r10b, %r13b
	jg	.L19

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	testb	%r13b, %r13b
	jne	.L132

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.L19:
.LVL28:
.LBE65:
.LBE87:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	cmpb	$0, 2(%r9)
	jne	.L59

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.LBB88:
.LBB89:
.LBB90:
	.loc 2 104 0 discriminator 12
	movl	$1, %edi
	xorl	%eax, %eax
	movl	$.LC2, %esi
	movq	%r8, -288(%rbp)
.LBE90:
.LBE89:
	.loc 1 12 0 discriminator 12
	movq	%rsp, -280(%rbp)
.LVL29:
.LBB92:
.LBB91:
	.loc 2 104 0 discriminator 12
	call	__printf_chk
.LVL30:
.LBE91:
.LBE92:
	.loc 1 19 0 discriminator 12
	movl	$stdin, %edi
	.loc 1 16 0 discriminator 12
	movq	$0, -128(%r14)
	.loc 1 17 0 discriminator 12
	movq	$0, -64(%r14)
	.loc 1 19 0 discriminator 12
	shrq	$3, %rdi
	movq	-288(%rbp), %rdx
	cmpb	$0, 2147450880(%rdi)
	jne	.L133

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%rdx, -288(%rbp)
	movq	stdin(%rip), %rdx
	leaq	-64(%r14), %rsi
	leaq	-128(%r14), %rdi
	call	getline
.LVL31:
	.loc 1 22 0 discriminator 12
	movq	-64(%r14), %rcx
	movq	-288(%rbp), %r11
	testq	%rcx, %rcx
	je	.L134

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	.loc 1 23 0 discriminator 2
	movq	-128(%r14), %r14
	.loc 1 22 0 discriminator 2
	addq	$15, %rcx
	andq	$-16, %rcx
	subq	%rcx, %rsp
	.loc 1 23 0 discriminator 2
	testq	%r14, %r14
	.loc 1 22 0 discriminator 2
	movq	%rsp, -296(%rbp)
.LVL32:
	.loc 1 23 0 discriminator 2
	je	.L135

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.LBB93:
.LBB94:
	.file 3 "/usr/include/x86_64-linux-gnu/bits/string3.h"
	.loc 3 110 0 discriminator 2
	movq	%r14, %rsi
	movq	%rsp, %rdi
	movq	%r11, -288(%rbp)
.LVL33:
	call	strcpy
.LVL34:
.LBE94:
.LBE93:
	.loc 1 24 0 discriminator 2
	movq	%r14, %rdi
	call	free
.LVL35:
.LBB95:
	.loc 1 26 0 discriminator 2
	movq	-288(%rbp), %r10
	movq	%r10, %rsi
	addq	$16, %rsi
	je	.L24

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	testb	$7, %sil
	jne	.L24

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%rsi, %rax
	shrq	$3, %rax
	cmpb	$0, 2147450880(%rax)
	jne	.L136

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	16(%r10), %r13
	testq	%r13, %r13
	je	.L137

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC3, %esi
	movq	%r13, %rdi
	call	strcmp
.LVL36:
.LBE95:
	testl	%eax, %eax
	jne	.L28

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	.loc 1 27 0
	movq	%rsp, %rdi
	call	buffer_overflow
.LVL37:
.L29:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	-280(%rbp), %rsp
.LVL38:
.LBE88:
	jmp	.L33
.LVL39:
.L28:
.LBB102:
.LBB96:
	.loc 1 29 0 discriminator 2

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC4, %esi
	movq	%r13, %rdi
	call	strcmp
.LVL40:
.LBE96:
	testl	%eax, %eax
	jne	.L30

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	.loc 1 30 0
	movq	-296(%rbp), %rdi
	call	stack_overflow
.LVL41:
	jmp	.L29
.L30:
.LVL42:
.LBB97:
	.loc 1 32 0 discriminator 2

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC5, %esi
	movq	%r13, %rdi
	call	strcmp
.LVL43:
.LBE97:
	testl	%eax, %eax
	jne	.L31

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	.loc 1 33 0
	movq	-296(%rbp), %rdi
	call	heap_overflow
.LVL44:
	jmp	.L29
.LVL45:
.L50:
.LBE102:
.LBB103:
.LBB80:
	.loc 1 53 0 discriminator 2

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC13, %esi
	movq	%r13, %rdi
	call	strcmp
.LVL46:
.LBE80:
	testl	%eax, %eax
	jne	.L51

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

.LVL47:
.LBB81:
	.loc 1 56 0
	movl	-192(%r14), %edi
	call	division_by_zero
.LVL48:
.LBE81:
	jmp	.L33
.LVL49:
.L31:
.LBE103:
.LBB104:
.LBB98:
	.loc 1 35 0 discriminator 2

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC6, %esi
	movq	%r13, %rdi
	call	strcmp
.LVL50:
.LBE98:
	testl	%eax, %eax
	jne	.L32

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	.loc 1 36 0
	movq	-296(%rbp), %rdi
	call	global_buffer_overflow
.LVL51:
	jmp	.L29
.LVL52:
.L51:
.LBE104:
.LBB105:
.LBB82:
	.loc 1 58 0 discriminator 2

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC14, %esi
	movq	%r13, %rdi
	call	strcmp
.LVL53:
.LBE82:
	testl	%eax, %eax
	jne	.L52

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	.loc 1 59 0
	movl	-192(%r14), %edi
	call	use_after_free
.LVL54:
	jmp	.L33
.LVL55:
.L32:
.LBE105:
.LBB106:
.LBB99:
.LBB100:
	.loc 2 104 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC7, %edi
	call	puts
.LVL56:
	jmp	.L29
.LVL57:
.L52:
.LBE100:
.LBE99:
.LBE106:
.LBB107:
.LBB83:
	.loc 1 61 0 discriminator 2

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC15, %esi
	movq	%r13, %rdi
	call	strcmp
.LVL58:
.LBE83:
	testl	%eax, %eax
	jne	.L53

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	.loc 1 62 0
	movl	-192(%r14), %edi
	call	out_of_bounds
.LVL59:
	jmp	.L33
.L53:
.LVL60:
.LBB84:
.LBB85:
	.loc 2 104 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC16, %edi
	call	puts
.LVL61:
	jmp	.L33
.LVL62:
.L111:
.LBE85:
.LBE84:
.LBE107:
	.loc 1 129 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	call	__stack_chk_fail
.LVL63:
.L110:
	.loc 1 9 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movabsq	$-723401728380766731, %r12
	movq	$1172321806, (%r15)
	movl	$-168430091, 2147450904(%rbx)
	movq	%r12, 2147450880(%rbx)
	movq	%r12, 2147450888(%rbx)
	movq	%r12, 2147450896(%rbx)
	jmp	.L3
.LVL64:
.L107:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%rsi, -280(%rbp)
	movl	$224, %edi
.LVL65:
	movq	%r15, %rsi
.LVL66:
	call	__asan_stack_malloc_2
.LVL67:
	movq	-280(%rbp), %r8
	movq	%rax, %r15
	jmp	.L1
.LVL68:
.L113:
.LBB108:
	.loc 1 73 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	call	__asan_handle_no_return
.LVL69:
	movl	$.Lubsan_data35, %edi
	call	__ubsan_handle_nonnull_arg_abort
.LVL70:
.L129:
.LBE108:
.LBB109:
.LBB86:
	.loc 1 47 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	call	__asan_handle_no_return
.LVL71:
	movl	$.Lubsan_data22, %edi
	call	__ubsan_handle_nonnull_arg_abort
.LVL72:
.L128:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%rsi, %rdi
	call	__asan_report_load8
.LVL73:
.L44:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.Lubsan_data58, %edi
	call	__ubsan_handle_type_mismatch_abort
.LVL74:
.L118:
.LBE86:
.LBE109:
.LBB110:
.LBB66:
	.loc 1 12 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	addq	$.LC1+1, %r13
	jc	.L12

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC1+1, %esi
	movl	$.Lubsan_data46, %edi
	call	__ubsan_handle_type_mismatch_abort
.LVL75:
.L120:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	call	__asan_report_load1
.LVL76:
.L116:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%r9, %rdi
	call	__asan_report_load1
.LVL77:
.L115:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	xorl	%esi, %esi
	movl	$.Lubsan_data44, %edi
	call	__ubsan_handle_type_mismatch_abort
.LVL78:
.L114:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	call	__asan_report_load8
.LVL79:
.L6:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%r8, %rsi
	movl	$.Lubsan_data42, %edi
	call	__ubsan_handle_type_mismatch_abort
.LVL80:
.L55:
.LBE66:
.LBE110:
.LBB111:
	.loc 1 73 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.Lubsan_data59, %edi
	call	__ubsan_handle_type_mismatch_abort
.LVL81:
.L112:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%rsi, %rdi
	call	__asan_report_load8
.LVL82:
.L137:
.LBE111:
.LBB112:
.LBB101:
	.loc 1 26 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	call	__asan_handle_no_return
.LVL83:
	movl	$.Lubsan_data10, %edi
	call	__ubsan_handle_nonnull_arg_abort
.LVL84:
.L136:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%rsi, %rdi
	call	__asan_report_load8
.LVL85:
.L24:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.Lubsan_data51, %edi
	call	__ubsan_handle_type_mismatch_abort
.LVL86:
.L135:
.LBE101:
	.loc 1 23 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	call	__asan_handle_no_return
.LVL87:
	movl	$.Lubsan_data9, %edi
	call	__ubsan_handle_nonnull_arg_abort
.LVL88:
.L134:
	.loc 1 22 0 discriminator 1

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	call	__asan_handle_no_return
.LVL89:
	xorl	%esi, %esi
	movl	$.Lubsan_data1, %edi
	call	__ubsan_handle_vla_bound_not_positive_abort
.LVL90:
.L133:
	.loc 1 19 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$stdin, %edi
	call	__asan_report_load8
.LVL91:
.L131:
.LBE112:
.LBB113:
.LBB67:
	.loc 1 12 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	xorl	%esi, %esi
	movl	$.Lubsan_data50, %edi
	call	__ubsan_handle_type_mismatch_abort
.LVL92:
.L130:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	addq	$.LC1+2, %r11
	jc	.L16

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC1+2, %esi
	movl	$.Lubsan_data49, %edi
	call	__ubsan_handle_type_mismatch_abort
.LVL93:
.L126:
.LBE67:
.LBE113:
.LBB114:
.LBB75:
	.loc 1 43 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	xorl	%esi, %esi
	movl	$.Lubsan_data57, %edi
	call	__ubsan_handle_type_mismatch_abort
.LVL94:
.L125:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	addq	$.LC8+2, %rax
	jc	.L39

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC8+2, %esi
	movl	$.Lubsan_data56, %edi
	call	__ubsan_handle_type_mismatch_abort
.LVL95:
.L123:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	xorl	%esi, %esi
	movl	$.Lubsan_data54, %edi
	call	__ubsan_handle_type_mismatch_abort
.LVL96:
.L127:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	call	__asan_report_load1
.LVL97:
.L119:
.LBE75:
.LBE114:
.LBB115:
.LBB68:
	.loc 1 12 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	xorl	%esi, %esi
	movl	$.Lubsan_data47, %edi
	call	__ubsan_handle_type_mismatch_abort
.LVL98:
.L124:
.LBE68:
.LBE115:
.LBB116:
.LBB76:
	.loc 1 43 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	call	__asan_report_load1
.LVL99:
.L122:

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	addq	$.LC8+1, %rdx
	jc	.L34

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$.LC8+1, %esi
	movl	$.Lubsan_data53, %edi
	call	__ubsan_handle_type_mismatch_abort
.LVL100:
.L132:
.LBE76:
.LBE116:
.LBB117:
.LBB69:
	.loc 1 12 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movq	%r11, %rdi
	call	__asan_report_load1
.LVL101:
.LBE69:
.LBE117:
	.cfi_endproc
.LFE71:
	.size	main, .-main
	.section	.text.unlikely
.LCOLDE22:
	.section	.text.startup
.LHOTE22:
	.section	.rodata
	.align 32
.LC23:
	.string	"./harness.c"
	.zero	52
	.data
	.align 32
	.type	.Lubsan_data59, @object
	.size	.Lubsan_data59, 40
.Lubsan_data59:
	.quad	.LC23
	.long	73
	.long	6
	.quad	.Lubsan_type1
	.quad	8
	.byte	0
	.zero	7
	.zero	56
	.align 32
	.type	.Lubsan_data58, @object
	.size	.Lubsan_data58, 40
.Lubsan_data58:
	.quad	.LC23
	.long	47
	.long	7
	.quad	.Lubsan_type1
	.quad	8
	.byte	0
	.zero	7
	.zero	56
	.align 32
	.type	.Lubsan_data57, @object
	.size	.Lubsan_data57, 40
.Lubsan_data57:
	.quad	.LC23
	.long	43
	.long	11
	.quad	.Lubsan_type2
	.quad	0
	.byte	0
	.zero	7
	.zero	56
	.align 32
	.type	.Lubsan_data56, @object
	.size	.Lubsan_data56, 40
.Lubsan_data56:
	.quad	.LC23
	.long	43
	.long	11
	.quad	.Lubsan_type3
	.quad	0
	.byte	0
	.zero	7
	.zero	56
	.align 32
	.type	.Lubsan_data54, @object
	.size	.Lubsan_data54, 40
.Lubsan_data54:
	.quad	.LC23
	.long	43
	.long	11
	.quad	.Lubsan_type2
	.quad	0
	.byte	0
	.zero	7
	.zero	56
	.align 32
	.type	.Lubsan_data53, @object
	.size	.Lubsan_data53, 40
.Lubsan_data53:
	.quad	.LC23
	.long	43
	.long	11
	.quad	.Lubsan_type3
	.quad	0
	.byte	0
	.zero	7
	.zero	56
	.align 32
	.type	.Lubsan_data51, @object
	.size	.Lubsan_data51, 40
.Lubsan_data51:
	.quad	.LC23
	.long	26
	.long	7
	.quad	.Lubsan_type1
	.quad	8
	.byte	0
	.zero	7
	.zero	56
	.align 32
	.type	.Lubsan_data50, @object
	.size	.Lubsan_data50, 40
.Lubsan_data50:
	.quad	.LC23
	.long	12
	.long	6
	.quad	.Lubsan_type2
	.quad	0
	.byte	0
	.zero	7
	.zero	56
	.align 32
	.type	.Lubsan_data49, @object
	.size	.Lubsan_data49, 40
.Lubsan_data49:
	.quad	.LC23
	.long	12
	.long	6
	.quad	.Lubsan_type3
	.quad	0
	.byte	0
	.zero	7
	.zero	56
	.align 32
	.type	.Lubsan_data47, @object
	.size	.Lubsan_data47, 40
.Lubsan_data47:
	.quad	.LC23
	.long	12
	.long	6
	.quad	.Lubsan_type2
	.quad	0
	.byte	0
	.zero	7
	.zero	56
	.align 32
	.type	.Lubsan_data46, @object
	.size	.Lubsan_data46, 40
.Lubsan_data46:
	.quad	.LC23
	.long	12
	.long	6
	.quad	.Lubsan_type3
	.quad	0
	.byte	0
	.zero	7
	.zero	56
	.align 32
	.type	.Lubsan_type3, @object
	.size	.Lubsan_type3, 11
.Lubsan_type3:
	.value	-1
	.value	0
	.string	"'char'"
	.zero	53
	.align 32
	.type	.Lubsan_data44, @object
	.size	.Lubsan_data44, 40
.Lubsan_data44:
	.quad	.LC23
	.long	12
	.long	6
	.quad	.Lubsan_type2
	.quad	0
	.byte	0
	.zero	7
	.zero	56
	.align 32
	.type	.Lubsan_type2, @object
	.size	.Lubsan_type2, 26
.Lubsan_type2:
	.value	-1
	.value	0
	.string	"'const unsigned char'"
	.zero	38
	.align 32
	.type	.Lubsan_data42, @object
	.size	.Lubsan_data42, 40
.Lubsan_data42:
	.quad	.LC23
	.long	12
	.long	6
	.quad	.Lubsan_type1
	.quad	8
	.byte	0
	.zero	7
	.zero	56
	.align 32
	.type	.Lubsan_type1, @object
	.size	.Lubsan_type1, 13
.Lubsan_type1:
	.value	-1
	.value	0
	.string	"'char *'"
	.zero	51
	.align 32
	.type	.Lubsan_data35, @object
	.size	.Lubsan_data35, 40
.Lubsan_data35:
	.quad	.LC23
	.long	73
	.long	6
	.quad	0
	.long	0
	.long	0
	.long	1
	.zero	4
	.zero	56
	.align 32
	.type	.Lubsan_data22, @object
	.size	.Lubsan_data22, 40
.Lubsan_data22:
	.quad	.LC23
	.long	47
	.long	7
	.quad	0
	.long	0
	.long	0
	.long	1
	.zero	4
	.zero	56
	.align 32
	.type	.Lubsan_data10, @object
	.size	.Lubsan_data10, 40
.Lubsan_data10:
	.quad	.LC23
	.long	26
	.long	7
	.quad	0
	.long	0
	.long	0
	.long	1
	.zero	4
	.zero	56
	.align 32
	.type	.Lubsan_data9, @object
	.size	.Lubsan_data9, 40
.Lubsan_data9:
	.quad	.LC23
	.long	23
	.long	4
	.quad	0
	.long	0
	.long	0
	.long	2
	.zero	4
	.zero	56
	.align 32
	.type	.Lubsan_data1, @object
	.size	.Lubsan_data1, 24
.Lubsan_data1:
	.quad	.LC23
	.long	22
	.long	9
	.quad	.Lubsan_type0
	.zero	40
	.align 32
	.type	.Lubsan_type0, @object
	.size	.Lubsan_type0, 24
.Lubsan_type0:
	.value	0
	.value	12
	.string	"'long unsigned int'"
	.zero	40
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC24:
	.string	"*.Lubsan_data59"
.LC25:
	.string	"*.Lubsan_data58"
.LC26:
	.string	"*.Lubsan_data57"
.LC27:
	.string	"*.Lubsan_data56"
.LC28:
	.string	"*.Lubsan_data54"
.LC29:
	.string	"*.Lubsan_data53"
.LC30:
	.string	"*.Lubsan_data51"
.LC31:
	.string	"*.Lubsan_data50"
.LC32:
	.string	"*.Lubsan_data49"
.LC33:
	.string	"*.Lubsan_data47"
.LC34:
	.string	"*.Lubsan_data46"
.LC35:
	.string	"*.Lubsan_type3"
.LC36:
	.string	"*.Lubsan_data44"
.LC37:
	.string	"*.Lubsan_type2"
.LC38:
	.string	"*.Lubsan_data42"
.LC39:
	.string	"*.Lubsan_type1"
.LC40:
	.string	"*.Lubsan_data35"
.LC41:
	.string	"*.Lubsan_data22"
.LC42:
	.string	"*.Lubsan_data10"
.LC43:
	.string	"*.Lubsan_data9"
.LC44:
	.string	"*.Lubsan_data1"
.LC45:
	.string	"*.Lubsan_type0"
.LC46:
	.string	"*.LC15"
.LC47:
	.string	"*.LC23"
.LC48:
	.string	"*.LC17"
.LC49:
	.string	"*.LC19"
.LC50:
	.string	"*.LC12"
.LC51:
	.string	"*.LC8"
.LC52:
	.string	"*.LC14"
.LC53:
	.string	"*.LC4"
.LC54:
	.string	"*.LC20"
.LC55:
	.string	"*.LC2"
.LC56:
	.string	"*.LC16"
.LC57:
	.string	"*.LC21"
.LC58:
	.string	"*.LC3"
.LC59:
	.string	"*.LC10"
.LC60:
	.string	"*.LC1"
.LC61:
	.string	"*.LC18"
.LC62:
	.string	"*.LC5"
.LC63:
	.string	"*.LC7"
.LC64:
	.string	"*.LC9"
.LC65:
	.string	"*.LC13"
.LC66:
	.string	"*.LC11"
.LC67:
	.string	"*.LC6"
	.data
	.align 32
	.type	.LASAN0, @object
	.size	.LASAN0, 2464
.LASAN0:
	.quad	.Lubsan_data59
	.quad	40
	.quad	96
	.quad	.LC24
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data58
	.quad	40
	.quad	96
	.quad	.LC25
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data57
	.quad	40
	.quad	96
	.quad	.LC26
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data56
	.quad	40
	.quad	96
	.quad	.LC27
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data54
	.quad	40
	.quad	96
	.quad	.LC28
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data53
	.quad	40
	.quad	96
	.quad	.LC29
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data51
	.quad	40
	.quad	96
	.quad	.LC30
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data50
	.quad	40
	.quad	96
	.quad	.LC31
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data49
	.quad	40
	.quad	96
	.quad	.LC32
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data47
	.quad	40
	.quad	96
	.quad	.LC33
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data46
	.quad	40
	.quad	96
	.quad	.LC34
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_type3
	.quad	11
	.quad	64
	.quad	.LC35
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data44
	.quad	40
	.quad	96
	.quad	.LC36
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_type2
	.quad	26
	.quad	64
	.quad	.LC37
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data42
	.quad	40
	.quad	96
	.quad	.LC38
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_type1
	.quad	13
	.quad	64
	.quad	.LC39
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data35
	.quad	40
	.quad	96
	.quad	.LC40
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data22
	.quad	40
	.quad	96
	.quad	.LC41
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data10
	.quad	40
	.quad	96
	.quad	.LC42
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data9
	.quad	40
	.quad	96
	.quad	.LC43
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_data1
	.quad	24
	.quad	64
	.quad	.LC44
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.Lubsan_type0
	.quad	24
	.quad	64
	.quad	.LC45
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC15
	.quad	14
	.quad	64
	.quad	.LC46
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC23
	.quad	12
	.quad	64
	.quad	.LC47
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC17
	.quad	27
	.quad	64
	.quad	.LC48
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC19
	.quad	18
	.quad	64
	.quad	.LC49
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC12
	.quad	10
	.quad	64
	.quad	.LC50
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC8
	.quad	3
	.quad	64
	.quad	.LC51
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC14
	.quad	15
	.quad	64
	.quad	.LC52
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC4
	.quad	6
	.quad	64
	.quad	.LC53
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC20
	.quad	23
	.quad	64
	.quad	.LC54
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC2
	.quad	8
	.quad	64
	.quad	.LC55
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC16
	.quad	75
	.quad	128
	.quad	.LC56
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC21
	.quad	14
	.quad	64
	.quad	.LC57
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC3
	.quad	5
	.quad	64
	.quad	.LC58
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC10
	.quad	9
	.quad	64
	.quad	.LC59
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC1
	.quad	3
	.quad	64
	.quad	.LC60
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC18
	.quad	6
	.quad	64
	.quad	.LC61
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC5
	.quad	5
	.quad	64
	.quad	.LC62
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC7
	.quad	38
	.quad	96
	.quad	.LC63
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC9
	.quad	3
	.quad	64
	.quad	.LC64
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC13
	.quad	12
	.quad	64
	.quad	.LC65
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC11
	.quad	12
	.quad	64
	.quad	.LC66
	.quad	.LC23
	.quad	0
	.quad	0
	.quad	.LC6
	.quad	7
	.quad	64
	.quad	.LC67
	.quad	.LC23
	.quad	0
	.quad	0
	.section	.text.unlikely
.LCOLDB68:
	.section	.text.exit,"ax",@progbits
.LHOTB68:
	.p2align 4,,15
	.type	_GLOBAL__sub_D_00099_0_main, @function
_GLOBAL__sub_D_00099_0_main:
.LFB72:
	.loc 1 129 0
	.cfi_startproc
	.loc 1 129 0

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	movl	$44, %esi
	movl	$.LASAN0, %edi
	jmp	__asan_unregister_globals
.LVL102:
	.cfi_endproc
.LFE72:
	.size	_GLOBAL__sub_D_00099_0_main, .-_GLOBAL__sub_D_00099_0_main
	.section	.text.unlikely
.LCOLDE68:
	.section	.text.exit
.LHOTE68:
	.section	.fini_array.00099,"aw"
	.align 8
	.quad	_GLOBAL__sub_D_00099_0_main
	.section	.text.unlikely
.LCOLDB69:
	.section	.text.startup
.LHOTB69:
	.p2align 4,,15
	.type	_GLOBAL__sub_I_00099_1_main, @function
_GLOBAL__sub_I_00099_1_main:
.LFB73:
	.loc 1 129 0
	.cfi_startproc

/* --- AFL TRAMPOLINE (64-BIT) --- */

.align 4

leaq -(128+24)(%%rsp), %%rsp
movq %%rdx,  0(%%rsp)
movq %%rcx,  8(%%rsp)
movq %%rax, 16(%%rsp)
movq $0x%08x, %%rcx
call __afl_maybe_log
movq 16(%%rsp), %%rax
movq  8(%%rsp), %%rcx
movq  0(%%rsp), %%rdx
leaq (128+24)(%%rsp), %%rsp

/* --- END --- */

	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	.loc 1 129 0
	call	__asan_init_v4
.LVL103:
	movl	$44, %esi
	movl	$.LASAN0, %edi
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	jmp	__asan_register_globals
.LVL104:
	.cfi_endproc
.LFE73:
	.size	_GLOBAL__sub_I_00099_1_main, .-_GLOBAL__sub_I_00099_1_main
	.section	.text.unlikely
.LCOLDE69:
	.section	.text.startup
.LHOTE69:
	.section	.init_array.00099,"aw"
	.align 8
	.quad	_GLOBAL__sub_I_00099_1_main
	.text
.Letext0:
	.section	.text.unlikely
.Letext_cold0:
	.file 4 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
	.file 5 "/usr/include/x86_64-linux-gnu/bits/types.h"
	.file 6 "/usr/include/x86_64-linux-gnu/sys/types.h"
	.file 7 "/usr/include/libio.h"
	.file 8 "/usr/include/stdio.h"
	.file 9 "<built-in>"
	.file 10 "./vul.h"
	.file 11 "/usr/include/stdlib.h"
	.section	.debug_info,"",@progbits
.Ldebug_info0:
	.long	0x115c
	.value	0x4
	.long	.Ldebug_abbrev0
	.byte	0x8
	.uleb128 0x1
	.long	.LASF106
	.byte	0xc
	.long	.LASF107
	.long	.LASF108
	.long	.Ldebug_ranges0+0x250
	.quad	0
	.long	.Ldebug_line0
	.uleb128 0x2
	.long	.LASF7
	.byte	0x4
	.byte	0xd8
	.long	0x34
	.uleb128 0x3
	.byte	0x8
	.byte	0x7
	.long	.LASF0
	.uleb128 0x4
	.byte	0x4
	.byte	0x5
	.string	"int"
	.uleb128 0x3
	.byte	0x4
	.byte	0x7
	.long	.LASF1
	.uleb128 0x3
	.byte	0x1
	.byte	0x8
	.long	.LASF2
	.uleb128 0x3
	.byte	0x2
	.byte	0x7
	.long	.LASF3
	.uleb128 0x3
	.byte	0x1
	.byte	0x6
	.long	.LASF4
	.uleb128 0x3
	.byte	0x2
	.byte	0x5
	.long	.LASF5
	.uleb128 0x3
	.byte	0x8
	.byte	0x5
	.long	.LASF6
	.uleb128 0x2
	.long	.LASF8
	.byte	0x5
	.byte	0x83
	.long	0x65
	.uleb128 0x2
	.long	.LASF9
	.byte	0x5
	.byte	0x84
	.long	0x65
	.uleb128 0x3
	.byte	0x8
	.byte	0x7
	.long	.LASF10
	.uleb128 0x5
	.byte	0x8
	.uleb128 0x2
	.long	.LASF11
	.byte	0x5
	.byte	0xac
	.long	0x65
	.uleb128 0x6
	.byte	0x8
	.long	0x9c
	.uleb128 0x3
	.byte	0x1
	.byte	0x6
	.long	.LASF12
	.uleb128 0x3
	.byte	0x8
	.byte	0x5
	.long	.LASF13
	.uleb128 0x2
	.long	.LASF14
	.byte	0x6
	.byte	0x6d
	.long	0x8b
	.uleb128 0x3
	.byte	0x8
	.byte	0x7
	.long	.LASF15
	.uleb128 0x6
	.byte	0x8
	.long	0xc2
	.uleb128 0x7
	.long	0x9c
	.uleb128 0x8
	.long	.LASF45
	.byte	0xd8
	.byte	0x7
	.byte	0xf1
	.long	0x244
	.uleb128 0x9
	.long	.LASF16
	.byte	0x7
	.byte	0xf2
	.long	0x3b
	.byte	0
	.uleb128 0x9
	.long	.LASF17
	.byte	0x7
	.byte	0xf7
	.long	0x96
	.byte	0x8
	.uleb128 0x9
	.long	.LASF18
	.byte	0x7
	.byte	0xf8
	.long	0x96
	.byte	0x10
	.uleb128 0x9
	.long	.LASF19
	.byte	0x7
	.byte	0xf9
	.long	0x96
	.byte	0x18
	.uleb128 0x9
	.long	.LASF20
	.byte	0x7
	.byte	0xfa
	.long	0x96
	.byte	0x20
	.uleb128 0x9
	.long	.LASF21
	.byte	0x7
	.byte	0xfb
	.long	0x96
	.byte	0x28
	.uleb128 0x9
	.long	.LASF22
	.byte	0x7
	.byte	0xfc
	.long	0x96
	.byte	0x30
	.uleb128 0x9
	.long	.LASF23
	.byte	0x7
	.byte	0xfd
	.long	0x96
	.byte	0x38
	.uleb128 0x9
	.long	.LASF24
	.byte	0x7
	.byte	0xfe
	.long	0x96
	.byte	0x40
	.uleb128 0xa
	.long	.LASF25
	.byte	0x7
	.value	0x100
	.long	0x96
	.byte	0x48
	.uleb128 0xa
	.long	.LASF26
	.byte	0x7
	.value	0x101
	.long	0x96
	.byte	0x50
	.uleb128 0xa
	.long	.LASF27
	.byte	0x7
	.value	0x102
	.long	0x96
	.byte	0x58
	.uleb128 0xa
	.long	.LASF28
	.byte	0x7
	.value	0x104
	.long	0x27c
	.byte	0x60
	.uleb128 0xa
	.long	.LASF29
	.byte	0x7
	.value	0x106
	.long	0x282
	.byte	0x68
	.uleb128 0xa
	.long	.LASF30
	.byte	0x7
	.value	0x108
	.long	0x3b
	.byte	0x70
	.uleb128 0xa
	.long	.LASF31
	.byte	0x7
	.value	0x10c
	.long	0x3b
	.byte	0x74
	.uleb128 0xa
	.long	.LASF32
	.byte	0x7
	.value	0x10e
	.long	0x6c
	.byte	0x78
	.uleb128 0xa
	.long	.LASF33
	.byte	0x7
	.value	0x112
	.long	0x50
	.byte	0x80
	.uleb128 0xa
	.long	.LASF34
	.byte	0x7
	.value	0x113
	.long	0x57
	.byte	0x82
	.uleb128 0xa
	.long	.LASF35
	.byte	0x7
	.value	0x114
	.long	0x288
	.byte	0x83
	.uleb128 0xa
	.long	.LASF36
	.byte	0x7
	.value	0x118
	.long	0x298
	.byte	0x88
	.uleb128 0xa
	.long	.LASF37
	.byte	0x7
	.value	0x121
	.long	0x77
	.byte	0x90
	.uleb128 0xa
	.long	.LASF38
	.byte	0x7
	.value	0x129
	.long	0x89
	.byte	0x98
	.uleb128 0xa
	.long	.LASF39
	.byte	0x7
	.value	0x12a
	.long	0x89
	.byte	0xa0
	.uleb128 0xa
	.long	.LASF40
	.byte	0x7
	.value	0x12b
	.long	0x89
	.byte	0xa8
	.uleb128 0xa
	.long	.LASF41
	.byte	0x7
	.value	0x12c
	.long	0x89
	.byte	0xb0
	.uleb128 0xa
	.long	.LASF42
	.byte	0x7
	.value	0x12e
	.long	0x29
	.byte	0xb8
	.uleb128 0xa
	.long	.LASF43
	.byte	0x7
	.value	0x12f
	.long	0x3b
	.byte	0xc0
	.uleb128 0xa
	.long	.LASF44
	.byte	0x7
	.value	0x131
	.long	0x29e
	.byte	0xc4
	.byte	0
	.uleb128 0xb
	.long	.LASF109
	.byte	0x7
	.byte	0x96
	.uleb128 0x8
	.long	.LASF46
	.byte	0x18
	.byte	0x7
	.byte	0x9c
	.long	0x27c
	.uleb128 0x9
	.long	.LASF47
	.byte	0x7
	.byte	0x9d
	.long	0x27c
	.byte	0
	.uleb128 0x9
	.long	.LASF48
	.byte	0x7
	.byte	0x9e
	.long	0x282
	.byte	0x8
	.uleb128 0x9
	.long	.LASF49
	.byte	0x7
	.byte	0xa2
	.long	0x3b
	.byte	0x10
	.byte	0
	.uleb128 0x6
	.byte	0x8
	.long	0x24b
	.uleb128 0x6
	.byte	0x8
	.long	0xc7
	.uleb128 0xc
	.long	0x9c
	.long	0x298
	.uleb128 0xd
	.long	0x82
	.byte	0
	.byte	0
	.uleb128 0x6
	.byte	0x8
	.long	0x244
	.uleb128 0xc
	.long	0x9c
	.long	0x2ae
	.uleb128 0xd
	.long	0x82
	.byte	0x13
	.byte	0
	.uleb128 0xe
	.long	.LASF50
	.byte	0x2
	.byte	0x66
	.long	0x3b
	.byte	0x3
	.long	0x2cb
	.uleb128 0xf
	.long	.LASF52
	.byte	0x2
	.byte	0x66
	.long	0x2cb
	.uleb128 0x10
	.byte	0
	.uleb128 0x11
	.long	0xbc
	.uleb128 0xe
	.long	.LASF51
	.byte	0x3
	.byte	0x6c
	.long	0x96
	.byte	0x3
	.long	0x2f7
	.uleb128 0xf
	.long	.LASF53
	.byte	0x3
	.byte	0x6c
	.long	0x2f7
	.uleb128 0xf
	.long	.LASF54
	.byte	0x3
	.byte	0x6c
	.long	0x2cb
	.byte	0
	.uleb128 0x11
	.long	0x96
	.uleb128 0x12
	.long	.LASF110
	.byte	0x1
	.byte	0x9
	.long	0x3b
	.quad	.LFB71
	.quad	.LFE71-.LFB71
	.uleb128 0x1
	.byte	0x9c
	.long	0xe6e
	.uleb128 0x13
	.long	.LASF55
	.byte	0x1
	.byte	0x9
	.long	0x3b
	.long	.LLST0
	.uleb128 0x13
	.long	.LASF56
	.byte	0x1
	.byte	0x9
	.long	0xe6e
	.long	.LLST1
	.uleb128 0x14
	.quad	.LBB51
	.quad	.LBE51-.LBB51
	.long	0x411
	.uleb128 0x15
	.string	"a"
	.byte	0x1
	.byte	0x63
	.long	0x3b
	.uleb128 0x16
	.long	0x2ae
	.quad	.LBB52
	.quad	.LBE52-.LBB52
	.byte	0x1
	.byte	0x65
	.long	0x399
	.uleb128 0x17
	.long	0x2be
	.long	.LLST2
	.uleb128 0x18
	.quad	.LVL3
	.long	0xf47
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.LC20
	.byte	0
	.byte	0
	.uleb128 0x16
	.long	0x2ae
	.quad	.LBB54
	.quad	.LBE54-.LBB54
	.byte	0x1
	.byte	0x67
	.long	0x3de
	.uleb128 0x17
	.long	0x2be
	.long	.LLST3
	.uleb128 0x18
	.quad	.LVL5
	.long	0xf56
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.byte	0x31
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC11
	.byte	0
	.byte	0
	.uleb128 0x1a
	.quad	.LVL2
	.long	0xf61
	.long	0x403
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.LC9
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7f
	.sleb128 32
	.byte	0
	.uleb128 0x1b
	.quad	.LVL4
	.long	0xf71
	.byte	0
	.uleb128 0x16
	.long	0x2ae
	.quad	.LBB56
	.quad	.LBE56-.LBB56
	.byte	0x1
	.byte	0x7e
	.long	0x451
	.uleb128 0x17
	.long	0x2be
	.long	.LLST4
	.uleb128 0x18
	.quad	.LVL6
	.long	0xf47
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.LC21
	.byte	0
	.byte	0
	.uleb128 0x1c
	.long	.Ldebug_ranges0+0
	.long	0x4ec
	.uleb128 0x1d
	.long	.LASF57
	.byte	0x1
	.byte	0x49
	.long	0x29
	.uleb128 0x1e
	.long	.LASF58
	.byte	0x1
	.byte	0x49
	.long	0x29
	.long	.LLST5
	.uleb128 0x1a
	.quad	.LVL8
	.long	0xf8f
	.long	0x493
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC18
	.byte	0
	.uleb128 0x1b
	.quad	.LVL69
	.long	0xf9e
	.uleb128 0x1a
	.quad	.LVL70
	.long	0xfad
	.long	0x4bf
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data35
	.byte	0
	.uleb128 0x1a
	.quad	.LVL81
	.long	0xfbc
	.long	0x4de
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data59
	.byte	0
	.uleb128 0x1b
	.quad	.LVL82
	.long	0xfcb
	.byte	0
	.uleb128 0x14
	.quad	.LBB59
	.quad	.LBE59-.LBB59
	.long	0x54d
	.uleb128 0x1e
	.long	.LASF59
	.byte	0x1
	.byte	0x4b
	.long	0x89
	.long	.LLST6
	.uleb128 0x1f
	.long	0x2ae
	.quad	.LBB60
	.quad	.LBE60-.LBB60
	.byte	0x1
	.byte	0x4a
	.uleb128 0x17
	.long	0x2be
	.long	.LLST7
	.uleb128 0x18
	.quad	.LVL10
	.long	0xf47
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.LC19
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x1c
	.long	.Ldebug_ranges0+0x40
	.long	0x6ac
	.uleb128 0x1d
	.long	.LASF57
	.byte	0x1
	.byte	0xc
	.long	0x29
	.uleb128 0x1e
	.long	.LASF58
	.byte	0x1
	.byte	0xc
	.long	0x29
	.long	.LLST8
	.uleb128 0x20
	.long	.Ldebug_ranges0+0x40
	.uleb128 0x1e
	.long	.LASF60
	.byte	0x1
	.byte	0xc
	.long	0xe74
	.long	.LLST9
	.uleb128 0x1e
	.long	.LASF61
	.byte	0x1
	.byte	0xc
	.long	0x3b
	.long	.LLST10
	.uleb128 0x1a
	.quad	.LVL75
	.long	0xfbc
	.long	0x5bf
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data46
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC1+1
	.byte	0
	.uleb128 0x1b
	.quad	.LVL76
	.long	0xff1
	.uleb128 0x1b
	.quad	.LVL77
	.long	0xff1
	.uleb128 0x1a
	.quad	.LVL78
	.long	0xfbc
	.long	0x5fd
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data44
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x30
	.byte	0
	.uleb128 0x1b
	.quad	.LVL79
	.long	0xfcb
	.uleb128 0x1a
	.quad	.LVL80
	.long	0xfbc
	.long	0x629
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data42
	.byte	0
	.uleb128 0x1a
	.quad	.LVL92
	.long	0xfbc
	.long	0x64d
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data50
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x30
	.byte	0
	.uleb128 0x1a
	.quad	.LVL93
	.long	0xfbc
	.long	0x679
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data49
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC1+2
	.byte	0
	.uleb128 0x1a
	.quad	.LVL98
	.long	0xfbc
	.long	0x69d
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data47
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x30
	.byte	0
	.uleb128 0x1b
	.quad	.LVL101
	.long	0xff1
	.byte	0
	.byte	0
	.uleb128 0x16
	.long	0x2ae
	.quad	.LBB70
	.quad	.LBE70-.LBB70
	.byte	0x1
	.byte	0x46
	.long	0x6ec
	.uleb128 0x17
	.long	0x2be
	.long	.LLST11
	.uleb128 0x18
	.quad	.LVL15
	.long	0xf47
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.LC17
	.byte	0
	.byte	0
	.uleb128 0x1c
	.long	.Ldebug_ranges0+0xc0
	.long	0x7ea
	.uleb128 0x1d
	.long	.LASF57
	.byte	0x1
	.byte	0x2b
	.long	0x29
	.uleb128 0x1e
	.long	.LASF58
	.byte	0x1
	.byte	0x2b
	.long	0x29
	.long	.LLST12
	.uleb128 0x20
	.long	.Ldebug_ranges0+0xc0
	.uleb128 0x1e
	.long	.LASF60
	.byte	0x1
	.byte	0x2b
	.long	0xe74
	.long	.LLST13
	.uleb128 0x1e
	.long	.LASF61
	.byte	0x1
	.byte	0x2b
	.long	0x3b
	.long	.LLST14
	.uleb128 0x1a
	.quad	.LVL94
	.long	0xfbc
	.long	0x756
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data57
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x30
	.byte	0
	.uleb128 0x1a
	.quad	.LVL95
	.long	0xfbc
	.long	0x782
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data56
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC8+2
	.byte	0
	.uleb128 0x1a
	.quad	.LVL96
	.long	0xfbc
	.long	0x7a6
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data54
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x30
	.byte	0
	.uleb128 0x1b
	.quad	.LVL97
	.long	0xff1
	.uleb128 0x1b
	.quad	.LVL99
	.long	0xff1
	.uleb128 0x18
	.quad	.LVL100
	.long	0xfbc
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data53
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC8+1
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x1c
	.long	.Ldebug_ranges0+0x100
	.long	0xab7
	.uleb128 0x15
	.string	"a"
	.byte	0x1
	.byte	0x2c
	.long	0x3b
	.uleb128 0x1c
	.long	.Ldebug_ranges0+0x160
	.long	0x8a8
	.uleb128 0x1d
	.long	.LASF57
	.byte	0x1
	.byte	0x2f
	.long	0x29
	.uleb128 0x1e
	.long	.LASF58
	.byte	0x1
	.byte	0x2f
	.long	0x29
	.long	.LLST15
	.uleb128 0x1a
	.quad	.LVL23
	.long	0xf8f
	.long	0x844
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC10
	.byte	0
	.uleb128 0x1b
	.quad	.LVL71
	.long	0xf9e
	.uleb128 0x1a
	.quad	.LVL72
	.long	0xfad
	.long	0x870
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data22
	.byte	0
	.uleb128 0x1a
	.quad	.LVL73
	.long	0xfcb
	.long	0x88c
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x6
	.byte	0x76
	.sleb128 -280
	.byte	0x6
	.byte	0x23
	.uleb128 0x10
	.byte	0
	.uleb128 0x18
	.quad	.LVL74
	.long	0xfbc
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data58
	.byte	0
	.byte	0
	.uleb128 0x14
	.quad	.LBB79
	.quad	.LBE79-.LBB79
	.long	0x8f9
	.uleb128 0x1d
	.long	.LASF57
	.byte	0x1
	.byte	0x32
	.long	0x29
	.uleb128 0x1e
	.long	.LASF58
	.byte	0x1
	.byte	0x32
	.long	0x29
	.long	.LLST16
	.uleb128 0x18
	.quad	.LVL25
	.long	0xf8f
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC12
	.byte	0
	.byte	0
	.uleb128 0x14
	.quad	.LBB80
	.quad	.LBE80-.LBB80
	.long	0x94a
	.uleb128 0x1d
	.long	.LASF57
	.byte	0x1
	.byte	0x35
	.long	0x29
	.uleb128 0x1e
	.long	.LASF58
	.byte	0x1
	.byte	0x35
	.long	0x29
	.long	.LLST17
	.uleb128 0x18
	.quad	.LVL46
	.long	0xf8f
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC13
	.byte	0
	.byte	0
	.uleb128 0x14
	.quad	.LBB81
	.quad	.LBE81-.LBB81
	.long	0x987
	.uleb128 0x21
	.string	"i"
	.byte	0x1
	.byte	0x36
	.long	0x3b
	.long	.LLST18
	.uleb128 0x21
	.string	"b"
	.byte	0x1
	.byte	0x37
	.long	0x3b
	.long	.LLST19
	.uleb128 0x1b
	.quad	.LVL48
	.long	0x1020
	.byte	0
	.uleb128 0x14
	.quad	.LBB82
	.quad	.LBE82-.LBB82
	.long	0x9d8
	.uleb128 0x1d
	.long	.LASF57
	.byte	0x1
	.byte	0x3a
	.long	0x29
	.uleb128 0x1e
	.long	.LASF58
	.byte	0x1
	.byte	0x3a
	.long	0x29
	.long	.LLST20
	.uleb128 0x18
	.quad	.LVL53
	.long	0xf8f
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC14
	.byte	0
	.byte	0
	.uleb128 0x14
	.quad	.LBB83
	.quad	.LBE83-.LBB83
	.long	0xa29
	.uleb128 0x1d
	.long	.LASF57
	.byte	0x1
	.byte	0x3d
	.long	0x29
	.uleb128 0x1e
	.long	.LASF58
	.byte	0x1
	.byte	0x3d
	.long	0x29
	.long	.LLST21
	.uleb128 0x18
	.quad	.LVL58
	.long	0xf8f
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC15
	.byte	0
	.byte	0
	.uleb128 0x16
	.long	0x2ae
	.quad	.LBB84
	.quad	.LBE84-.LBB84
	.byte	0x1
	.byte	0x41
	.long	0xa69
	.uleb128 0x17
	.long	0x2be
	.long	.LLST22
	.uleb128 0x18
	.quad	.LVL61
	.long	0xf47
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.LC16
	.byte	0
	.byte	0
	.uleb128 0x1a
	.quad	.LVL22
	.long	0xf61
	.long	0xa8f
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.LC9
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x3
	.byte	0x7e
	.sleb128 -192
	.byte	0
	.uleb128 0x1b
	.quad	.LVL26
	.long	0x107b
	.uleb128 0x1b
	.quad	.LVL54
	.long	0x1086
	.uleb128 0x1b
	.quad	.LVL59
	.long	0x1091
	.byte	0
	.uleb128 0x1c
	.long	.Ldebug_ranges0+0x190
	.long	0xe60
	.uleb128 0x1d
	.long	.LASF62
	.byte	0x1
	.byte	0x10
	.long	0x96
	.uleb128 0x15
	.string	"len"
	.byte	0x1
	.byte	0x11
	.long	0x29
	.uleb128 0x1d
	.long	.LASF63
	.byte	0x1
	.byte	0x12
	.long	0xaa
	.uleb128 0x1e
	.long	.LASF64
	.byte	0x1
	.byte	0x16
	.long	0xe7f
	.long	.LLST23
	.uleb128 0x22
	.long	0x2ae
	.quad	.LBB89
	.long	.Ldebug_ranges0+0x1f0
	.byte	0x1
	.byte	0xe
	.long	0xb31
	.uleb128 0x17
	.long	0x2be
	.long	.LLST24
	.uleb128 0x18
	.quad	.LVL30
	.long	0xf56
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x1
	.byte	0x31
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC2
	.byte	0
	.byte	0
	.uleb128 0x16
	.long	0x2d0
	.quad	.LBB93
	.quad	.LBE93-.LBB93
	.byte	0x1
	.byte	0x17
	.long	0xb79
	.uleb128 0x17
	.long	0x2eb
	.long	.LLST25
	.uleb128 0x17
	.long	0x2e0
	.long	.LLST26
	.uleb128 0x18
	.quad	.LVL34
	.long	0x109c
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x77
	.sleb128 0
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7e
	.sleb128 0
	.byte	0
	.byte	0
	.uleb128 0x1c
	.long	.Ldebug_ranges0+0x220
	.long	0xc25
	.uleb128 0x1d
	.long	.LASF57
	.byte	0x1
	.byte	0x1a
	.long	0x29
	.uleb128 0x1e
	.long	.LASF58
	.byte	0x1
	.byte	0x1a
	.long	0x29
	.long	.LLST27
	.uleb128 0x1a
	.quad	.LVL36
	.long	0xf8f
	.long	0xbc1
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC3
	.byte	0
	.uleb128 0x1b
	.quad	.LVL83
	.long	0xf9e
	.uleb128 0x1a
	.quad	.LVL84
	.long	0xfad
	.long	0xbed
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data10
	.byte	0
	.uleb128 0x1a
	.quad	.LVL85
	.long	0xfcb
	.long	0xc09
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x6
	.byte	0x76
	.sleb128 -288
	.byte	0x6
	.byte	0x23
	.uleb128 0x10
	.byte	0
	.uleb128 0x18
	.quad	.LVL86
	.long	0xfbc
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data51
	.byte	0
	.byte	0
	.uleb128 0x14
	.quad	.LBB96
	.quad	.LBE96-.LBB96
	.long	0xc76
	.uleb128 0x1d
	.long	.LASF57
	.byte	0x1
	.byte	0x1d
	.long	0x29
	.uleb128 0x1e
	.long	.LASF58
	.byte	0x1
	.byte	0x1d
	.long	0x29
	.long	.LLST28
	.uleb128 0x18
	.quad	.LVL40
	.long	0xf8f
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC4
	.byte	0
	.byte	0
	.uleb128 0x14
	.quad	.LBB97
	.quad	.LBE97-.LBB97
	.long	0xcc7
	.uleb128 0x1d
	.long	.LASF57
	.byte	0x1
	.byte	0x20
	.long	0x29
	.uleb128 0x1e
	.long	.LASF58
	.byte	0x1
	.byte	0x20
	.long	0x29
	.long	.LLST29
	.uleb128 0x18
	.quad	.LVL43
	.long	0xf8f
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC5
	.byte	0
	.byte	0
	.uleb128 0x14
	.quad	.LBB98
	.quad	.LBE98-.LBB98
	.long	0xd18
	.uleb128 0x1d
	.long	.LASF57
	.byte	0x1
	.byte	0x23
	.long	0x29
	.uleb128 0x1e
	.long	.LASF58
	.byte	0x1
	.byte	0x23
	.long	0x29
	.long	.LLST30
	.uleb128 0x18
	.quad	.LVL50
	.long	0xf8f
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7d
	.sleb128 0
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x9
	.byte	0x3
	.quad	.LC6
	.byte	0
	.byte	0
	.uleb128 0x16
	.long	0x2ae
	.quad	.LBB99
	.quad	.LBE99-.LBB99
	.byte	0x1
	.byte	0x27
	.long	0xd58
	.uleb128 0x17
	.long	0x2be
	.long	.LLST31
	.uleb128 0x18
	.quad	.LVL56
	.long	0xf47
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.LC7
	.byte	0
	.byte	0
	.uleb128 0x1a
	.quad	.LVL31
	.long	0x10d6
	.long	0xd77
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x3
	.byte	0x7e
	.sleb128 -128
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x7e
	.sleb128 -64
	.byte	0
	.uleb128 0x1a
	.quad	.LVL35
	.long	0x10e2
	.long	0xd8f
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x7e
	.sleb128 0
	.byte	0
	.uleb128 0x1a
	.quad	.LVL37
	.long	0x10ee
	.long	0xda7
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x2
	.byte	0x77
	.sleb128 0
	.byte	0
	.uleb128 0x1a
	.quad	.LVL41
	.long	0x10f9
	.long	0xdc1
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x4
	.byte	0x76
	.sleb128 -296
	.byte	0x6
	.byte	0
	.uleb128 0x1a
	.quad	.LVL44
	.long	0x1104
	.long	0xddb
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x4
	.byte	0x76
	.sleb128 -296
	.byte	0x6
	.byte	0
	.uleb128 0x1a
	.quad	.LVL51
	.long	0x110f
	.long	0xdf5
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x4
	.byte	0x76
	.sleb128 -296
	.byte	0x6
	.byte	0
	.uleb128 0x1b
	.quad	.LVL87
	.long	0xf9e
	.uleb128 0x1a
	.quad	.LVL88
	.long	0xfad
	.long	0xe21
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data9
	.byte	0
	.uleb128 0x1b
	.quad	.LVL89
	.long	0xf9e
	.uleb128 0x1a
	.quad	.LVL90
	.long	0x111a
	.long	0xe52
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.Lubsan_data1
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x1
	.byte	0x30
	.byte	0
	.uleb128 0x1b
	.quad	.LVL91
	.long	0xfcb
	.byte	0
	.uleb128 0x1b
	.quad	.LVL63
	.long	0x1129
	.byte	0
	.uleb128 0x6
	.byte	0x8
	.long	0x96
	.uleb128 0x6
	.byte	0x8
	.long	0xe7a
	.uleb128 0x7
	.long	0x49
	.uleb128 0xc
	.long	0x9c
	.long	0xe8e
	.uleb128 0x23
	.long	0x82
	.byte	0
	.uleb128 0x24
	.long	.LASF65
	.byte	0x8
	.byte	0xa8
	.long	0x282
	.uleb128 0x24
	.long	.LASF66
	.byte	0x8
	.byte	0xa9
	.long	0x282
	.uleb128 0x25
	.long	.LASF67
	.quad	.LFB72
	.quad	.LFE72-.LFB72
	.uleb128 0x1
	.byte	0x9c
	.long	0xee1
	.uleb128 0x26
	.quad	.LVL102
	.long	0x1132
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.LASAN0
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x8
	.byte	0x2c
	.byte	0
	.byte	0
	.uleb128 0x25
	.long	.LASF68
	.quad	.LFB73
	.quad	.LFE73-.LFB73
	.uleb128 0x1
	.byte	0x9c
	.long	0xf2b
	.uleb128 0x1b
	.quad	.LVL103
	.long	0x1141
	.uleb128 0x26
	.quad	.LVL104
	.long	0x1150
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x55
	.uleb128 0x9
	.byte	0x3
	.quad	.LASAN0
	.uleb128 0x19
	.uleb128 0x1
	.byte	0x54
	.uleb128 0x2
	.byte	0x8
	.byte	0x2c
	.byte	0
	.byte	0
	.uleb128 0x27
	.uleb128 0x1a
	.byte	0x9e
	.uleb128 0x18
	.byte	0x67
	.byte	0x6f
	.byte	0x6e
	.byte	0x6e
	.byte	0x61
	.byte	0x20
	.byte	0x63
	.byte	0x61
	.byte	0x6c
	.byte	0x6c
	.byte	0x20
	.byte	0x64
	.byte	0x6f
	.byte	0x75
	.byte	0x62
	.byte	0x6c
	.byte	0x65
	.byte	0x5f
	.byte	0x66
	.byte	0x72
	.byte	0x65
	.byte	0x65
	.byte	0xa
	.byte	0
	.uleb128 0x28
	.long	.LASF69
	.long	.LASF71
	.byte	0x9
	.byte	0
	.long	.LASF69
	.uleb128 0x29
	.long	.LASF73
	.long	.LASF73
	.byte	0x2
	.byte	0x57
	.uleb128 0x2a
	.long	.LASF70
	.long	.LASF72
	.byte	0x8
	.value	0x1be
	.long	.LASF70
	.uleb128 0x29
	.long	.LASF74
	.long	.LASF74
	.byte	0xa
	.byte	0x18
	.uleb128 0x27
	.uleb128 0x11
	.byte	0x9e
	.uleb128 0xf
	.byte	0x64
	.byte	0x69
	.byte	0x64
	.byte	0x20
	.byte	0x6e
	.byte	0x6f
	.byte	0x74
	.byte	0x20
	.byte	0x63
	.byte	0x72
	.byte	0x61
	.byte	0x73
	.byte	0x68
	.byte	0xa
	.byte	0
	.uleb128 0x28
	.long	.LASF75
	.long	.LASF76
	.byte	0x9
	.byte	0
	.long	.LASF75
	.uleb128 0x28
	.long	.LASF77
	.long	.LASF78
	.byte	0x9
	.byte	0
	.long	.LASF77
	.uleb128 0x28
	.long	.LASF79
	.long	.LASF80
	.byte	0x9
	.byte	0
	.long	.LASF79
	.uleb128 0x28
	.long	.LASF81
	.long	.LASF82
	.byte	0x9
	.byte	0
	.long	.LASF81
	.uleb128 0x28
	.long	.LASF83
	.long	.LASF84
	.byte	0x9
	.byte	0
	.long	.LASF83
	.uleb128 0x27
	.uleb128 0x15
	.byte	0x9e
	.uleb128 0x13
	.byte	0x6d
	.byte	0x65
	.byte	0x6d
	.byte	0x6f
	.byte	0x72
	.byte	0x79
	.byte	0x20
	.byte	0x6c
	.byte	0x65
	.byte	0x61
	.byte	0x6b
	.byte	0x20
	.byte	0x73
	.byte	0x74
	.byte	0x61
	.byte	0x72
	.byte	0x74
	.byte	0xa
	.byte	0
	.uleb128 0x28
	.long	.LASF85
	.long	.LASF86
	.byte	0x9
	.byte	0
	.long	.LASF85
	.uleb128 0x27
	.uleb128 0x1e
	.byte	0x9e
	.uleb128 0x1c
	.byte	0x63
	.byte	0x6f
	.byte	0x6d
	.byte	0x6d
	.byte	0x61
	.byte	0x6e
	.byte	0x64
	.byte	0x73
	.byte	0x3a
	.byte	0x20
	.byte	0x3c
	.byte	0x20
	.byte	0x2d
	.byte	0x69
	.byte	0x20
	.byte	0x2e
	.byte	0x2e
	.byte	0x20
	.byte	0x7c
	.byte	0x20
	.byte	0x2d
	.byte	0x73
	.byte	0x20
	.byte	0x2e
	.byte	0x2e
	.byte	0x3e
	.byte	0xa
	.byte	0
	.uleb128 0x29
	.long	.LASF87
	.long	.LASF87
	.byte	0xa
	.byte	0x42
	.uleb128 0x27
	.uleb128 0x4e
	.byte	0x9e
	.uleb128 0x4c
	.byte	0x63
	.byte	0x6f
	.byte	0x6d
	.byte	0x6d
	.byte	0x61
	.byte	0x6e
	.byte	0x64
	.byte	0x73
	.byte	0x3a
	.byte	0x20
	.byte	0x2d
	.byte	0x69
	.byte	0x20
	.byte	0x3c
	.byte	0x69
	.byte	0x6e
	.byte	0x74
	.byte	0x5f
	.byte	0x6f
	.byte	0x76
	.byte	0x65
	.byte	0x72
	.byte	0x7c
	.byte	0x69
	.byte	0x6e
	.byte	0x74
	.byte	0x5f
	.byte	0x75
	.byte	0x6e
	.byte	0x64
	.byte	0x65
	.byte	0x72
	.byte	0x7c
	.byte	0x64
	.byte	0x69
	.byte	0x76
	.byte	0x5f
	.byte	0x62
	.byte	0x79
	.byte	0x5f
	.byte	0x7a
	.byte	0x65
	.byte	0x72
	.byte	0x6f
	.byte	0x7c
	.byte	0x75
	.byte	0x73
	.byte	0x65
	.byte	0x5f
	.byte	0x61
	.byte	0x66
	.byte	0x74
	.byte	0x65
	.byte	0x72
	.byte	0x5f
	.byte	0x66
	.byte	0x72
	.byte	0x65
	.byte	0x65
	.byte	0x7c
	.byte	0x6f
	.byte	0x75
	.byte	0x74
	.byte	0x5f
	.byte	0x6f
	.byte	0x66
	.byte	0x5f
	.byte	0x62
	.byte	0x6f
	.byte	0x75
	.byte	0x6e
	.byte	0x64
	.byte	0x73
	.byte	0x3e
	.byte	0xa
	.byte	0
	.uleb128 0x29
	.long	.LASF88
	.long	.LASF88
	.byte	0xa
	.byte	0x1a
	.uleb128 0x29
	.long	.LASF89
	.long	.LASF89
	.byte	0xa
	.byte	0x34
	.uleb128 0x29
	.long	.LASF90
	.long	.LASF90
	.byte	0xa
	.byte	0x3c
	.uleb128 0x28
	.long	.LASF51
	.long	.LASF91
	.byte	0x9
	.byte	0
	.long	.LASF51
	.uleb128 0x27
	.uleb128 0x29
	.byte	0x9e
	.uleb128 0x27
	.byte	0x63
	.byte	0x6f
	.byte	0x6d
	.byte	0x6d
	.byte	0x61
	.byte	0x6e
	.byte	0x64
	.byte	0x73
	.byte	0x3a
	.byte	0x20
	.byte	0x2d
	.byte	0x73
	.byte	0x20
	.byte	0x3c
	.byte	0x62
	.byte	0x75
	.byte	0x66
	.byte	0x66
	.byte	0x7c
	.byte	0x73
	.byte	0x74
	.byte	0x61
	.byte	0x63
	.byte	0x6b
	.byte	0x7c
	.byte	0x68
	.byte	0x65
	.byte	0x61
	.byte	0x70
	.byte	0x7c
	.byte	0x67
	.byte	0x6c
	.byte	0x6f
	.byte	0x62
	.byte	0x61
	.byte	0x6c
	.byte	0x3e
	.byte	0xa
	.byte	0
	.uleb128 0x2b
	.long	.LASF92
	.long	.LASF92
	.byte	0x8
	.value	0x2a6
	.uleb128 0x2b
	.long	.LASF93
	.long	.LASF93
	.byte	0xb
	.value	0x1e3
	.uleb128 0x29
	.long	.LASF94
	.long	.LASF94
	.byte	0xa
	.byte	0x6
	.uleb128 0x29
	.long	.LASF95
	.long	.LASF95
	.byte	0xa
	.byte	0xc
	.uleb128 0x29
	.long	.LASF96
	.long	.LASF96
	.byte	0xa
	.byte	0x12
	.uleb128 0x29
	.long	.LASF97
	.long	.LASF97
	.byte	0xa
	.byte	0x2e
	.uleb128 0x28
	.long	.LASF98
	.long	.LASF99
	.byte	0x9
	.byte	0
	.long	.LASF98
	.uleb128 0x2c
	.long	.LASF111
	.long	.LASF111
	.uleb128 0x28
	.long	.LASF100
	.long	.LASF101
	.byte	0x9
	.byte	0
	.long	.LASF100
	.uleb128 0x28
	.long	.LASF102
	.long	.LASF103
	.byte	0x9
	.byte	0
	.long	.LASF102
	.uleb128 0x28
	.long	.LASF104
	.long	.LASF105
	.byte	0x9
	.byte	0
	.long	.LASF104
	.byte	0
	.section	.debug_abbrev,"",@progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x1b
	.uleb128 0xe
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x10
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x24
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3e
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0x8
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0xf
	.byte	0
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x26
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x13
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0xb
	.uleb128 0xb
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0xd
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x38
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xb
	.uleb128 0x16
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xc
	.uleb128 0x1
	.byte	0x1
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xd
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2f
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0xe
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x20
	.uleb128 0xb
	.uleb128 0x34
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0xf
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x10
	.uleb128 0x18
	.byte	0
	.byte	0
	.byte	0
	.uleb128 0x11
	.uleb128 0x37
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x12
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x13
	.uleb128 0x5
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x14
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x15
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x16
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x17
	.uleb128 0x5
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x18
	.uleb128 0x4109
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x31
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x19
	.uleb128 0x410a
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.uleb128 0x2111
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x1a
	.uleb128 0x4109
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1b
	.uleb128 0x4109
	.byte	0
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x31
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1c
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1d
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x1e
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x1f
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x20
	.uleb128 0xb
	.byte	0x1
	.uleb128 0x55
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x21
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0x8
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x2
	.uleb128 0x17
	.byte	0
	.byte	0
	.uleb128 0x22
	.uleb128 0x1d
	.byte	0x1
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x52
	.uleb128 0x1
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0xb
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x23
	.uleb128 0x21
	.byte	0
	.uleb128 0x49
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x24
	.uleb128 0x34
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x49
	.uleb128 0x13
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x25
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x27
	.uleb128 0x19
	.uleb128 0x34
	.uleb128 0x19
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x7
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x26
	.uleb128 0x4109
	.byte	0x1
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x2115
	.uleb128 0x19
	.uleb128 0x31
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x27
	.uleb128 0x36
	.byte	0
	.uleb128 0x2
	.uleb128 0x18
	.byte	0
	.byte	0
	.uleb128 0x28
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x6e
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x29
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x2a
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x6e
	.uleb128 0xe
	.byte	0
	.byte	0
	.uleb128 0x2b
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0x2c
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3c
	.uleb128 0x19
	.uleb128 0x6e
	.uleb128 0xe
	.uleb128 0x3
	.uleb128 0xe
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
.LLST0:
	.quad	.LVL0
	.quad	.LVL1
	.value	0x1
	.byte	0x55
	.quad	.LVL1
	.quad	.LVL3
	.value	0x1
	.byte	0x5d
	.quad	.LVL3
	.quad	.LVL7
	.value	0x4
	.byte	0xf3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.quad	.LVL7
	.quad	.LVL14
	.value	0x1
	.byte	0x5d
	.quad	.LVL14
	.quad	.LVL16
	.value	0x4
	.byte	0xf3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.quad	.LVL16
	.quad	.LVL17
	.value	0x1
	.byte	0x5d
	.quad	.LVL17
	.quad	.LVL64
	.value	0x4
	.byte	0xf3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.quad	.LVL64
	.quad	.LVL65
	.value	0x1
	.byte	0x55
	.quad	.LVL65
	.quad	.LVL70
	.value	0x1
	.byte	0x5d
	.quad	.LVL70
	.quad	.LVL76
	.value	0x4
	.byte	0xf3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.quad	.LVL76
	.quad	.LVL82
	.value	0x1
	.byte	0x5d
	.quad	.LVL82
	.quad	.LFE71
	.value	0x4
	.byte	0xf3
	.uleb128 0x1
	.byte	0x55
	.byte	0x9f
	.quad	0
	.quad	0
.LLST1:
	.quad	.LVL0
	.quad	.LVL1
	.value	0x1
	.byte	0x54
	.quad	.LVL1
	.quad	.LVL64
	.value	0x4
	.byte	0xf3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.quad	.LVL64
	.quad	.LVL66
	.value	0x1
	.byte	0x54
	.quad	.LVL66
	.quad	.LVL67-1
	.value	0x1
	.byte	0x58
	.quad	.LVL67-1
	.quad	.LVL68
	.value	0x3
	.byte	0x76
	.sleb128 -280
	.quad	.LVL68
	.quad	.LFE71
	.value	0x4
	.byte	0xf3
	.uleb128 0x1
	.byte	0x54
	.byte	0x9f
	.quad	0
	.quad	0
.LLST2:
	.quad	.LVL2
	.quad	.LVL3
	.value	0x6
	.byte	0xf2
	.long	.Ldebug_info0+3883
	.sleb128 0
	.quad	0
	.quad	0
.LLST3:
	.quad	.LVL4
	.quad	.LVL5
	.value	0xa
	.byte	0x3
	.quad	.LC11
	.byte	0x9f
	.quad	0
	.quad	0
.LLST4:
	.quad	.LVL5
	.quad	.LVL6
	.value	0x6
	.byte	0xf2
	.long	.Ldebug_info0+3964
	.sleb128 0
	.quad	0
	.quad	0
.LLST5:
	.quad	.LVL7
	.quad	.LVL11
	.value	0x2
	.byte	0x35
	.byte	0x9f
	.quad	.LVL68
	.quad	.LVL70
	.value	0x2
	.byte	0x35
	.byte	0x9f
	.quad	.LVL80
	.quad	.LVL82
	.value	0x2
	.byte	0x35
	.byte	0x9f
	.quad	0
	.quad	0
.LLST6:
	.quad	.LVL10
	.quad	.LVL11
	.value	0x2
	.byte	0x30
	.byte	0x9f
	.quad	0
	.quad	0
.LLST7:
	.quad	.LVL9
	.quad	.LVL10
	.value	0x6
	.byte	0xf2
	.long	.Ldebug_info0+4058
	.sleb128 0
	.quad	0
	.quad	0
.LLST8:
	.quad	.LVL11
	.quad	.LVL62
	.value	0x2
	.byte	0x32
	.byte	0x9f
	.quad	.LVL70
	.quad	.LVL80
	.value	0x2
	.byte	0x32
	.byte	0x9f
	.quad	.LVL82
	.quad	.LFE71
	.value	0x2
	.byte	0x32
	.byte	0x9f
	.quad	0
	.quad	0
.LLST9:
	.quad	.LVL12
	.quad	.LVL15-1
	.value	0x1
	.byte	0x59
	.quad	.LVL16
	.quad	.LVL22-1
	.value	0x1
	.byte	0x59
	.quad	.LVL27
	.quad	.LVL30-1
	.value	0x1
	.byte	0x59
	.quad	.LVL74
	.quad	.LVL75-1
	.value	0x1
	.byte	0x59
	.quad	.LVL75
	.quad	.LVL76-1
	.value	0x1
	.byte	0x59
	.quad	.LVL76
	.quad	.LVL77-1
	.value	0x1
	.byte	0x59
	.quad	.LVL77
	.quad	.LVL78-1
	.value	0x1
	.byte	0x59
	.quad	.LVL91
	.quad	.LVL92-1
	.value	0x1
	.byte	0x59
	.quad	.LVL92
	.quad	.LVL93-1
	.value	0x1
	.byte	0x59
	.quad	.LVL93
	.quad	.LVL94-1
	.value	0x1
	.byte	0x59
	.quad	.LVL94
	.quad	.LVL95-1
	.value	0x1
	.byte	0x59
	.quad	.LVL95
	.quad	.LVL96-1
	.value	0x1
	.byte	0x59
	.quad	.LVL96
	.quad	.LVL97-1
	.value	0x1
	.byte	0x59
	.quad	.LVL97
	.quad	.LVL98-1
	.value	0x1
	.byte	0x59
	.quad	.LVL98
	.quad	.LVL99-1
	.value	0x1
	.byte	0x59
	.quad	.LVL99
	.quad	.LVL100-1
	.value	0x1
	.byte	0x59
	.quad	.LVL100
	.quad	.LVL101-1
	.value	0x1
	.byte	0x59
	.quad	0
	.quad	0
.LLST10:
	.quad	.LVL13
	.quad	.LVL14
	.value	0xb
	.byte	0x8
	.byte	0x2d
	.byte	0x79
	.sleb128 0
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL16
	.quad	.LVL18
	.value	0xb
	.byte	0x8
	.byte	0x2d
	.byte	0x79
	.sleb128 0
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL18
	.quad	.LVL19
	.value	0xb
	.byte	0x8
	.byte	0x73
	.byte	0x79
	.sleb128 1
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL27
	.quad	.LVL28
	.value	0xb
	.byte	0x8
	.byte	0x73
	.byte	0x79
	.sleb128 1
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL28
	.quad	.LVL30-1
	.value	0x9
	.byte	0x79
	.sleb128 2
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1f
	.byte	0x9f
	.quad	.LVL74
	.quad	.LVL75-1
	.value	0xb
	.byte	0x8
	.byte	0x2d
	.byte	0x79
	.sleb128 0
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL75
	.quad	.LVL76-1
	.value	0xb
	.byte	0x8
	.byte	0x2d
	.byte	0x79
	.sleb128 0
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL91
	.quad	.LVL92-1
	.value	0xb
	.byte	0x8
	.byte	0x73
	.byte	0x79
	.sleb128 1
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL92
	.quad	.LVL93-1
	.value	0xb
	.byte	0x8
	.byte	0x73
	.byte	0x79
	.sleb128 1
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL97
	.quad	.LVL98-1
	.value	0xb
	.byte	0x8
	.byte	0x2d
	.byte	0x79
	.sleb128 0
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL100
	.quad	.LVL101-1
	.value	0xb
	.byte	0x8
	.byte	0x73
	.byte	0x79
	.sleb128 1
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	0
	.quad	0
.LLST11:
	.quad	.LVL14
	.quad	.LVL16
	.value	0x6
	.byte	0xf2
	.long	.Ldebug_info0+4096
	.sleb128 0
	.quad	0
	.quad	0
.LLST12:
	.quad	.LVL19
	.quad	.LVL27
	.value	0x2
	.byte	0x32
	.byte	0x9f
	.quad	.LVL45
	.quad	.LVL49
	.value	0x2
	.byte	0x32
	.byte	0x9f
	.quad	.LVL52
	.quad	.LVL55
	.value	0x2
	.byte	0x32
	.byte	0x9f
	.quad	.LVL57
	.quad	.LVL62
	.value	0x2
	.byte	0x32
	.byte	0x9f
	.quad	.LVL70
	.quad	.LVL74
	.value	0x2
	.byte	0x32
	.byte	0x9f
	.quad	.LVL93
	.quad	.LVL97
	.value	0x2
	.byte	0x32
	.byte	0x9f
	.quad	.LVL98
	.quad	.LVL100
	.value	0x2
	.byte	0x32
	.byte	0x9f
	.quad	0
	.quad	0
.LLST13:
	.quad	.LVL19
	.quad	.LVL22-1
	.value	0x1
	.byte	0x59
	.quad	.LVL93
	.quad	.LVL94-1
	.value	0x1
	.byte	0x59
	.quad	.LVL94
	.quad	.LVL95-1
	.value	0x1
	.byte	0x59
	.quad	.LVL95
	.quad	.LVL96-1
	.value	0x1
	.byte	0x59
	.quad	.LVL96
	.quad	.LVL97-1
	.value	0x1
	.byte	0x59
	.quad	.LVL98
	.quad	.LVL99-1
	.value	0x1
	.byte	0x59
	.quad	.LVL99
	.quad	.LVL100-1
	.value	0x1
	.byte	0x59
	.quad	0
	.quad	0
.LLST14:
	.quad	.LVL19
	.quad	.LVL20
	.value	0xb
	.byte	0x8
	.byte	0x2d
	.byte	0x79
	.sleb128 0
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL20
	.quad	.LVL21
	.value	0xb
	.byte	0x8
	.byte	0x69
	.byte	0x79
	.sleb128 1
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL21
	.quad	.LVL22-1
	.value	0x9
	.byte	0x79
	.sleb128 2
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1f
	.byte	0x9f
	.quad	.LVL93
	.quad	.LVL94-1
	.value	0xb
	.byte	0x8
	.byte	0x69
	.byte	0x79
	.sleb128 1
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL94
	.quad	.LVL95-1
	.value	0xb
	.byte	0x8
	.byte	0x69
	.byte	0x79
	.sleb128 1
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL95
	.quad	.LVL96-1
	.value	0xb
	.byte	0x8
	.byte	0x2d
	.byte	0x79
	.sleb128 0
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL96
	.quad	.LVL97-1
	.value	0xb
	.byte	0x8
	.byte	0x69
	.byte	0x79
	.sleb128 1
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL98
	.quad	.LVL99-1
	.value	0xb
	.byte	0x8
	.byte	0x2d
	.byte	0x79
	.sleb128 0
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	.LVL99
	.quad	.LVL100-1
	.value	0xb
	.byte	0x8
	.byte	0x2d
	.byte	0x79
	.sleb128 0
	.byte	0x94
	.byte	0x1
	.byte	0x8
	.byte	0xff
	.byte	0x1a
	.byte	0x1c
	.byte	0x9f
	.quad	0
	.quad	0
.LLST15:
	.quad	.LVL22
	.quad	.LVL27
	.value	0x2
	.byte	0x38
	.byte	0x9f
	.quad	.LVL45
	.quad	.LVL49
	.value	0x2
	.byte	0x38
	.byte	0x9f
	.quad	.LVL52
	.quad	.LVL55
	.value	0x2
	.byte	0x38
	.byte	0x9f
	.quad	.LVL57
	.quad	.LVL62
	.value	0x2
	.byte	0x38
	.byte	0x9f
	.quad	.LVL70
	.quad	.LVL74
	.value	0x2
	.byte	0x38
	.byte	0x9f
	.quad	0
	.quad	0
.LLST16:
	.quad	.LVL24
	.quad	.LVL27
	.value	0x2
	.byte	0x39
	.byte	0x9f
	.quad	.LVL45
	.quad	.LVL49
	.value	0x2
	.byte	0x39
	.byte	0x9f
	.quad	.LVL52
	.quad	.LVL55
	.value	0x2
	.byte	0x39
	.byte	0x9f
	.quad	.LVL57
	.quad	.LVL62
	.value	0x2
	.byte	0x39
	.byte	0x9f
	.quad	0
	.quad	0
.LLST17:
	.quad	.LVL45
	.quad	.LVL49
	.value	0x2
	.byte	0x3b
	.byte	0x9f
	.quad	.LVL52
	.quad	.LVL55
	.value	0x2
	.byte	0x3b
	.byte	0x9f
	.quad	.LVL57
	.quad	.LVL62
	.value	0x2
	.byte	0x3b
	.byte	0x9f
	.quad	0
	.quad	0
.LLST18:
	.quad	.LVL47
	.quad	.LVL49
	.value	0x2
	.byte	0x34
	.byte	0x9f
	.quad	0
	.quad	0
.LLST19:
	.quad	.LVL47
	.quad	.LVL49
	.value	0x2
	.byte	0x36
	.byte	0x9f
	.quad	0
	.quad	0
.LLST20:
	.quad	.LVL52
	.quad	.LVL55
	.value	0x2
	.byte	0x3e
	.byte	0x9f
	.quad	.LVL57
	.quad	.LVL62
	.value	0x2
	.byte	0x3e
	.byte	0x9f
	.quad	0
	.quad	0
.LLST21:
	.quad	.LVL57
	.quad	.LVL62
	.value	0x2
	.byte	0x3d
	.byte	0x9f
	.quad	0
	.quad	0
.LLST22:
	.quad	.LVL60
	.quad	.LVL62
	.value	0x6
	.byte	0xf2
	.long	.Ldebug_info0+4139
	.sleb128 0
	.quad	0
	.quad	0
.LLST23:
	.quad	.LVL32
	.quad	.LVL38
	.value	0x2
	.byte	0x77
	.sleb128 0
	.quad	.LVL38
	.quad	.LVL39
	.value	0x4
	.byte	0x76
	.sleb128 -296
	.byte	0x6
	.quad	.LVL39
	.quad	.LVL45
	.value	0x2
	.byte	0x77
	.sleb128 0
	.quad	.LVL49
	.quad	.LVL52
	.value	0x2
	.byte	0x77
	.sleb128 0
	.quad	.LVL55
	.quad	.LVL57
	.value	0x2
	.byte	0x77
	.sleb128 0
	.quad	.LVL82
	.quad	.LVL88
	.value	0x2
	.byte	0x77
	.sleb128 0
	.quad	0
	.quad	0
.LLST24:
	.quad	.LVL29
	.quad	.LVL30
	.value	0xa
	.byte	0x3
	.quad	.LC2
	.byte	0x9f
	.quad	0
	.quad	0
.LLST25:
	.quad	.LVL33
	.quad	.LVL34-1
	.value	0x1
	.byte	0x54
	.quad	.LVL34-1
	.quad	.LVL34
	.value	0x1
	.byte	0x5e
	.quad	0
	.quad	0
.LLST26:
	.quad	.LVL33
	.quad	.LVL34
	.value	0x1
	.byte	0x57
	.quad	0
	.quad	0
.LLST27:
	.quad	.LVL35
	.quad	.LVL45
	.value	0x2
	.byte	0x34
	.byte	0x9f
	.quad	.LVL49
	.quad	.LVL52
	.value	0x2
	.byte	0x34
	.byte	0x9f
	.quad	.LVL55
	.quad	.LVL57
	.value	0x2
	.byte	0x34
	.byte	0x9f
	.quad	.LVL82
	.quad	.LVL86
	.value	0x2
	.byte	0x34
	.byte	0x9f
	.quad	0
	.quad	0
.LLST28:
	.quad	.LVL39
	.quad	.LVL45
	.value	0x2
	.byte	0x35
	.byte	0x9f
	.quad	.LVL49
	.quad	.LVL52
	.value	0x2
	.byte	0x35
	.byte	0x9f
	.quad	.LVL55
	.quad	.LVL57
	.value	0x2
	.byte	0x35
	.byte	0x9f
	.quad	0
	.quad	0
.LLST29:
	.quad	.LVL42
	.quad	.LVL45
	.value	0x2
	.byte	0x34
	.byte	0x9f
	.quad	.LVL49
	.quad	.LVL52
	.value	0x2
	.byte	0x34
	.byte	0x9f
	.quad	.LVL55
	.quad	.LVL57
	.value	0x2
	.byte	0x34
	.byte	0x9f
	.quad	0
	.quad	0
.LLST30:
	.quad	.LVL49
	.quad	.LVL52
	.value	0x2
	.byte	0x36
	.byte	0x9f
	.quad	.LVL55
	.quad	.LVL57
	.value	0x2
	.byte	0x36
	.byte	0x9f
	.quad	0
	.quad	0
.LLST31:
	.quad	.LVL55
	.quad	.LVL57
	.value	0x6
	.byte	0xf2
	.long	.Ldebug_info0+4267
	.sleb128 0
	.quad	0
	.quad	0
	.section	.debug_aranges,"",@progbits
	.long	0x4c
	.value	0x2
	.long	.Ldebug_info0
	.byte	0x8
	.byte	0
	.value	0
	.value	0
	.quad	.LFB71
	.quad	.LFE71-.LFB71
	.quad	.LFB72
	.quad	.LFE72-.LFB72
	.quad	.LFB73
	.quad	.LFE73-.LFB73
	.quad	0
	.quad	0
	.section	.debug_ranges,"",@progbits
.Ldebug_ranges0:
	.quad	.LBB58
	.quad	.LBE58
	.quad	.LBB108
	.quad	.LBE108
	.quad	.LBB111
	.quad	.LBE111
	.quad	0
	.quad	0
	.quad	.LBB62
	.quad	.LBE62
	.quad	.LBB72
	.quad	.LBE72
	.quad	.LBB87
	.quad	.LBE87
	.quad	.LBB110
	.quad	.LBE110
	.quad	.LBB113
	.quad	.LBE113
	.quad	.LBB115
	.quad	.LBE115
	.quad	.LBB117
	.quad	.LBE117
	.quad	0
	.quad	0
	.quad	.LBB73
	.quad	.LBE73
	.quad	.LBB114
	.quad	.LBE114
	.quad	.LBB116
	.quad	.LBE116
	.quad	0
	.quad	0
	.quad	.LBB77
	.quad	.LBE77
	.quad	.LBB103
	.quad	.LBE103
	.quad	.LBB105
	.quad	.LBE105
	.quad	.LBB107
	.quad	.LBE107
	.quad	.LBB109
	.quad	.LBE109
	.quad	0
	.quad	0
	.quad	.LBB78
	.quad	.LBE78
	.quad	.LBB86
	.quad	.LBE86
	.quad	0
	.quad	0
	.quad	.LBB88
	.quad	.LBE88
	.quad	.LBB102
	.quad	.LBE102
	.quad	.LBB104
	.quad	.LBE104
	.quad	.LBB106
	.quad	.LBE106
	.quad	.LBB112
	.quad	.LBE112
	.quad	0
	.quad	0
	.quad	.LBB89
	.quad	.LBE89
	.quad	.LBB92
	.quad	.LBE92
	.quad	0
	.quad	0
	.quad	.LBB95
	.quad	.LBE95
	.quad	.LBB101
	.quad	.LBE101
	.quad	0
	.quad	0
	.quad	.LFB71
	.quad	.LFE71
	.quad	.LFB72
	.quad	.LFE72
	.quad	.LFB73
	.quad	.LFE73
	.quad	0
	.quad	0
	.section	.debug_line,"",@progbits
.Ldebug_line0:
	.section	.debug_str,"MS",@progbits,1
.LASF29:
	.string	"_chain"
.LASF32:
	.string	"_old_offset"
.LASF71:
	.string	"__builtin_puts"
.LASF73:
	.string	"__printf_chk"
.LASF45:
	.string	"_IO_FILE"
.LASF72:
	.string	"scanf"
.LASF27:
	.string	"_IO_save_end"
.LASF5:
	.string	"short int"
.LASF7:
	.string	"size_t"
.LASF10:
	.string	"sizetype"
.LASF70:
	.string	"__isoc99_scanf"
.LASF37:
	.string	"_offset"
.LASF74:
	.string	"integer_overflow"
.LASF87:
	.string	"division_by_zero"
.LASF83:
	.string	"__asan_report_load8"
.LASF58:
	.string	"__s2_len"
.LASF21:
	.string	"_IO_write_ptr"
.LASF16:
	.string	"_flags"
.LASF64:
	.string	"buff"
.LASF23:
	.string	"_IO_buf_base"
.LASF14:
	.string	"ssize_t"
.LASF60:
	.string	"__s2"
.LASF28:
	.string	"_markers"
.LASF18:
	.string	"_IO_read_end"
.LASF92:
	.string	"getline"
.LASF106:
	.string	"GNU C11 5.4.0 20160609 -mtune=generic -march=x86-64 -g -g -O0 -O3 -fsanitize=address,undefined -fno-sanitize-recover=undefined -funroll-loops -fstack-protector-strong"
.LASF62:
	.string	"line"
.LASF93:
	.string	"free"
.LASF79:
	.string	"__ubsan_handle_nonnull_arg_abort"
.LASF56:
	.string	"argv"
.LASF100:
	.string	"__asan_unregister_globals"
.LASF13:
	.string	"long long int"
.LASF67:
	.string	"_GLOBAL__sub_D_00099_0_main"
.LASF97:
	.string	"global_buffer_overflow"
.LASF65:
	.string	"stdin"
.LASF11:
	.string	"__ssize_t"
.LASF36:
	.string	"_lock"
.LASF96:
	.string	"heap_overflow"
.LASF105:
	.string	"__builtin___asan_register_globals"
.LASF94:
	.string	"buffer_overflow"
.LASF53:
	.string	"__dest"
.LASF50:
	.string	"printf"
.LASF0:
	.string	"long unsigned int"
.LASF33:
	.string	"_cur_column"
.LASF86:
	.string	"__builtin___asan_report_load1"
.LASF49:
	.string	"_pos"
.LASF102:
	.string	"__asan_init_v4"
.LASF89:
	.string	"use_after_free"
.LASF48:
	.string	"_sbuf"
.LASF101:
	.string	"__builtin___asan_unregister_globals"
.LASF9:
	.string	"__off64_t"
.LASF104:
	.string	"__asan_register_globals"
.LASF2:
	.string	"unsigned char"
.LASF54:
	.string	"__src"
.LASF55:
	.string	"argc"
.LASF63:
	.string	"read"
.LASF4:
	.string	"signed char"
.LASF15:
	.string	"long long unsigned int"
.LASF91:
	.string	"__builtin_strcpy"
.LASF1:
	.string	"unsigned int"
.LASF46:
	.string	"_IO_marker"
.LASF35:
	.string	"_shortbuf"
.LASF61:
	.string	"__result"
.LASF38:
	.string	"__pad1"
.LASF108:
	.string	"/home/francis/Documents/ThesisWork/vulnerabilities/example1"
.LASF69:
	.string	"puts"
.LASF20:
	.string	"_IO_write_base"
.LASF44:
	.string	"_unused2"
.LASF17:
	.string	"_IO_read_ptr"
.LASF68:
	.string	"_GLOBAL__sub_I_00099_1_main"
.LASF24:
	.string	"_IO_buf_end"
.LASF99:
	.string	"__builtin___ubsan_handle_vla_bound_not_positive_abort"
.LASF12:
	.string	"char"
.LASF6:
	.string	"long int"
.LASF110:
	.string	"main"
.LASF47:
	.string	"_next"
.LASF51:
	.string	"strcpy"
.LASF39:
	.string	"__pad2"
.LASF40:
	.string	"__pad3"
.LASF41:
	.string	"__pad4"
.LASF42:
	.string	"__pad5"
.LASF76:
	.string	"__builtin_strcmp"
.LASF3:
	.string	"short unsigned int"
.LASF52:
	.string	"__fmt"
.LASF84:
	.string	"__builtin___asan_report_load8"
.LASF88:
	.string	"integer_underflow"
.LASF22:
	.string	"_IO_write_end"
.LASF82:
	.string	"__builtin___ubsan_handle_type_mismatch_abort"
.LASF103:
	.string	"__builtin___asan_init_v4"
.LASF90:
	.string	"out_of_bounds"
.LASF30:
	.string	"_fileno"
.LASF57:
	.string	"__s1_len"
.LASF78:
	.string	"__builtin___asan_handle_no_return"
.LASF8:
	.string	"__off_t"
.LASF26:
	.string	"_IO_backup_base"
.LASF107:
	.string	"./harness.c"
.LASF75:
	.string	"strcmp"
.LASF59:
	.string	"pointer"
.LASF31:
	.string	"_flags2"
.LASF80:
	.string	"__builtin___ubsan_handle_nonnull_arg_abort"
.LASF43:
	.string	"_mode"
.LASF19:
	.string	"_IO_read_base"
.LASF98:
	.string	"__ubsan_handle_vla_bound_not_positive_abort"
.LASF34:
	.string	"_vtable_offset"
.LASF25:
	.string	"_IO_save_base"
.LASF77:
	.string	"__asan_handle_no_return"
.LASF111:
	.string	"__stack_chk_fail"
.LASF95:
	.string	"stack_overflow"
.LASF85:
	.string	"__asan_report_load1"
.LASF66:
	.string	"stdout"
.LASF109:
	.string	"_IO_lock_t"
.LASF81:
	.string	"__ubsan_handle_type_mismatch_abort"
	.ident	"GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609"
	.section	.note.GNU-stack,"",@progbits

/* --- AFL MAIN PAYLOAD (64-BIT) --- */

.text
.att_syntax
.code64
.align 8

__afl_maybe_log:

  lahf
  seto  %al

  /* Check if SHM region is already mapped. */

  movq  __afl_area_ptr(%rip), %rdx
  testq %rdx, %rdx
  je    __afl_setup

__afl_store:

  /* Calculate and store hit for the code location specified in rcx. */

  xorq __afl_prev_loc(%rip), %rcx
  xorq %rcx, __afl_prev_loc(%rip)
  shrq $1, __afl_prev_loc(%rip)

  incb (%rdx, %rcx, 1)

__afl_return:

  addb $127, %al
  sahf
  ret

.align 8

__afl_setup:

  /* Do not retry setup if we had previous failures. */

  cmpb $0, __afl_setup_failure(%rip)
  jne __afl_return

  /* Check out if we have a global pointer on file. */

  movq  __afl_global_area_ptr@GOTPCREL(%rip), %rdx
  movq  (%rdx), %rdx
  testq %rdx, %rdx
  je    __afl_setup_first

  movq %rdx, __afl_area_ptr(%rip)
  jmp  __afl_store

__afl_setup_first:

  /* Save everything that is not yet saved and that may be touched by
     getenv() and several other libcalls we'll be relying on. */

  leaq -352(%rsp), %rsp

  movq %rax,   0(%rsp)
  movq %rcx,   8(%rsp)
  movq %rdi,  16(%rsp)
  movq %rsi,  32(%rsp)
  movq %r8,   40(%rsp)
  movq %r9,   48(%rsp)
  movq %r10,  56(%rsp)
  movq %r11,  64(%rsp)

  movq %xmm0,  96(%rsp)
  movq %xmm1,  112(%rsp)
  movq %xmm2,  128(%rsp)
  movq %xmm3,  144(%rsp)
  movq %xmm4,  160(%rsp)
  movq %xmm5,  176(%rsp)
  movq %xmm6,  192(%rsp)
  movq %xmm7,  208(%rsp)
  movq %xmm8,  224(%rsp)
  movq %xmm9,  240(%rsp)
  movq %xmm10, 256(%rsp)
  movq %xmm11, 272(%rsp)
  movq %xmm12, 288(%rsp)
  movq %xmm13, 304(%rsp)
  movq %xmm14, 320(%rsp)
  movq %xmm15, 336(%rsp)

  /* Map SHM, jumping to __afl_setup_abort if something goes wrong. */

  /* The 64-bit ABI requires 16-byte stack alignment. We'll keep the
     original stack ptr in the callee-saved r12. */

  pushq %r12
  movq  %rsp, %r12
  subq  $16, %rsp
  andq  $0xfffffffffffffff0, %rsp

  leaq .AFL_SHM_ENV(%rip), %rdi
call getenv@PLT

  testq %rax, %rax
  je    __afl_setup_abort

  movq  %rax, %rdi
call atoi@PLT

  xorq %rdx, %rdx   /* shmat flags    */
  xorq %rsi, %rsi   /* requested addr */
  movq %rax, %rdi   /* SHM ID         */
call shmat@PLT

  cmpq $-1, %rax
  je   __afl_setup_abort

  /* Store the address of the SHM region. */

  movq %rax, %rdx
  movq %rax, __afl_area_ptr(%rip)

  movq __afl_global_area_ptr@GOTPCREL(%rip), %rdx
  movq %rax, (%rdx)
  movq %rax, %rdx

__afl_forkserver:

  /* Enter the fork server mode to avoid the overhead of execve() calls. We
     push rdx (area ptr) twice to keep stack alignment neat. */

  pushq %rdx
  pushq %rdx

  /* Phone home and tell the parent that we're OK. (Note that signals with
     no SA_RESTART will mess it up). If this fails, assume that the fd is
     closed because we were execve()d from an instrumented binary, or because
     the parent doesn't want to use the fork server. */

  movq $4, %rdx               /* length    */
  leaq __afl_temp(%rip), %rsi /* data      */
  movq $(198 + 1), %rdi       /* file desc */
call write@PLT

  cmpq $4, %rax
  jne  __afl_fork_resume

__afl_fork_wait_loop:

  /* Wait for parent by reading from the pipe. Abort if read fails. */

  movq $4, %rdx               /* length    */
  leaq __afl_temp(%rip), %rsi /* data      */
  movq $198, %rdi             /* file desc */
call read@PLT
  cmpq $4, %rax
  jne  __afl_die

  /* Once woken up, create a clone of our process. This is an excellent use
     case for syscall(__NR_clone, 0, CLONE_PARENT), but glibc boneheadedly
     caches getpid() results and offers no way to update the value, breaking
     abort(), raise(), and a bunch of other things :-( */

call fork@PLT
  cmpq $0, %rax
  jl   __afl_die
  je   __afl_fork_resume

  /* In parent process: write PID to pipe, then wait for child. */

  movl %eax, __afl_fork_pid(%rip)

  movq $4, %rdx                   /* length    */
  leaq __afl_fork_pid(%rip), %rsi /* data      */
  movq $(198 + 1), %rdi             /* file desc */
call write@PLT

  movq $0, %rdx                   /* no flags  */
  leaq __afl_temp(%rip), %rsi     /* status    */
  movq __afl_fork_pid(%rip), %rdi /* PID       */
call waitpid@PLT
  cmpq $0, %rax
  jle  __afl_die

  /* Relay wait status to pipe, then loop back. */

  movq $4, %rdx               /* length    */
  leaq __afl_temp(%rip), %rsi /* data      */
  movq $(198 + 1), %rdi         /* file desc */
call write@PLT

  jmp  __afl_fork_wait_loop

__afl_fork_resume:

  /* In child process: close fds, resume execution. */

  movq $198, %rdi
call close@PLT

  movq $(198 + 1), %rdi
call close@PLT

  popq %rdx
  popq %rdx

  movq %r12, %rsp
  popq %r12

  movq  0(%rsp), %rax
  movq  8(%rsp), %rcx
  movq 16(%rsp), %rdi
  movq 32(%rsp), %rsi
  movq 40(%rsp), %r8
  movq 48(%rsp), %r9
  movq 56(%rsp), %r10
  movq 64(%rsp), %r11

  movq  96(%rsp), %xmm0
  movq 112(%rsp), %xmm1
  movq 128(%rsp), %xmm2
  movq 144(%rsp), %xmm3
  movq 160(%rsp), %xmm4
  movq 176(%rsp), %xmm5
  movq 192(%rsp), %xmm6
  movq 208(%rsp), %xmm7
  movq 224(%rsp), %xmm8
  movq 240(%rsp), %xmm9
  movq 256(%rsp), %xmm10
  movq 272(%rsp), %xmm11
  movq 288(%rsp), %xmm12
  movq 304(%rsp), %xmm13
  movq 320(%rsp), %xmm14
  movq 336(%rsp), %xmm15

  leaq 352(%rsp), %rsp

  jmp  __afl_store

__afl_die:

  xorq %rax, %rax
call _exit@PLT

__afl_setup_abort:

  /* Record setup failure so that we don't keep calling
     shmget() / shmat() over and over again. */

  incb __afl_setup_failure(%rip)

  movq %r12, %rsp
  popq %r12

  movq  0(%rsp), %rax
  movq  8(%rsp), %rcx
  movq 16(%rsp), %rdi
  movq 32(%rsp), %rsi
  movq 40(%rsp), %r8
  movq 48(%rsp), %r9
  movq 56(%rsp), %r10
  movq 64(%rsp), %r11

  movq  96(%rsp), %xmm0
  movq 112(%rsp), %xmm1
  movq 128(%rsp), %xmm2
  movq 144(%rsp), %xmm3
  movq 160(%rsp), %xmm4
  movq 176(%rsp), %xmm5
  movq 192(%rsp), %xmm6
  movq 208(%rsp), %xmm7
  movq 224(%rsp), %xmm8
  movq 240(%rsp), %xmm9
  movq 256(%rsp), %xmm10
  movq 272(%rsp), %xmm11
  movq 288(%rsp), %xmm12
  movq 304(%rsp), %xmm13
  movq 320(%rsp), %xmm14
  movq 336(%rsp), %xmm15

  leaq 352(%rsp), %rsp

  jmp __afl_return

.AFL_VARS:

  .lcomm   __afl_area_ptr, 8
  .lcomm   __afl_prev_loc, 8
  .lcomm   __afl_fork_pid, 4
  .lcomm   __afl_temp, 4
  .lcomm   __afl_setup_failure, 1
  .comm    __afl_global_area_ptr, 8, 8

.AFL_SHM_ENV:
  .asciz "__AFL_SHM_ID"

/* --- END --- */

